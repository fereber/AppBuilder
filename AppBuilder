#!/bin/bash

# Build your desktop and server apps faster for Linux
#
# WARNING:
# The installation works properly on a fresh install server,
# if you already had installed something (Nginx, MySql or something else)
# the install script may not work, or causes unwanted things.

_VERSION='1.0.0'

# Lists of application groups, what you want to manage as an application group
_APP_DESKTOP=()
_APP_MEDIA=()
_APP_NET=()
_APP_DEV=()
_APP_GAME=()
_APP_UTILS=()
_APP_FONT=()
_APP_NON_FAVORITE=()
_APP_FAVORITE=()

# Building methods (package format) for interactive selection list
#
# Usage example:
#   _APP_INSTALL[packagename]="--pack" # default package format, install apt-get
#   _APP_INSTALL[packagename]="--pack --flat com.app.APP --snap" # install from several package format as well, default + flat + snap
#
# On the interactive selection list:
#   If you install the application in several ways (source), than you will see this on application list:
#     '✔ (pack+snap) gnome-calculator'
#          otherwise this (if installed with one method): '✔ (snap) gnome-calculator' or '✔ (pack) gnome-calculator'
#     '✔ (pack+snap+flat) gimp'
#
# Return:
#   Groups of Array, what we will send to cmd_install function.
#
declare -A _APP_INSTALL

# Desktop
_APP_DESKTOP+=( nautilus )                        ; _APP_INSTALL[nautilus]="--pack"
_APP_DESKTOP+=( gedit )                           ; _APP_INSTALL[gedit]="--pack"
_APP_DESKTOP+=( libreoffice )                     ; _APP_INSTALL[libreoffice]="--pack"
_APP_DESKTOP+=( libreoffice-style-sifr )          ; _APP_INSTALL[libreoffice-style-sifr]="--pack" # for icons
_APP_DESKTOP+=( simple-scan )                     ; _APP_INSTALL[simple-scan]="--pack"
_APP_DESKTOP+=( evince )                          ; _APP_INSTALL[evince]="--pack" # GNOME document viewer
_APP_DESKTOP+=( cheese )                          ; _APP_INSTALL[cheese]="--pack" # GNOME webcam
_APP_DESKTOP+=( gnome-software )                  ; _APP_INSTALL[gnome-software]="--pack"
_APP_DESKTOP+=( gnome-software-plugin-snap )      ; _APP_INSTALL[gnome-software-plugin-snap]="--pack"
_APP_DESKTOP+=( flatpak )                         ; _APP_INSTALL[flatpak]="--pack"
_APP_DESKTOP+=( gnome-software-plugin-flatpak )   ; _APP_INSTALL[gnome-software-plugin-flatpak]="--pack" # + flatpak if it is not exists
_APP_DESKTOP+=( gnome-shell-extensions )          ; _APP_INSTALL[gnome-shell-extensions]="--pack"
_APP_DESKTOP+=( chrome-gnome-shell )              ; _APP_INSTALL[chrome-gnome-shell]="--pack"
_APP_DESKTOP+=( gnome-weather )                   ; _APP_INSTALL[gnome-weather]="--pack"
_APP_DESKTOP+=( gnome-shell-extension-weather )   ; _APP_INSTALL[gnome-shell-extension-weather]="--pack"
_APP_DESKTOP+=( gnome-calculator )                ; _APP_INSTALL[gnome-calculator]="--pack" # default: snap; add to an app list (with a different install method) and install if you want
_APP_DESKTOP+=( gnome-calendar )                  ; _APP_INSTALL[gnome-calendar]="--pack"
_APP_DESKTOP+=( gnome-clocks )                    ; _APP_INSTALL[gnome-clocks]="--pack"
_APP_DESKTOP+=( gnome-maps )                      ; _APP_INSTALL[gnome-maps]="--pack"
_APP_DESKTOP+=( gnome-screenshot )                ; _APP_INSTALL[gnome-screenshot]="--pack"
_APP_DESKTOP+=( gnome-sushi )                     ; _APP_INSTALL[gnome-sushi]="--pack" # To activate the preview (images, videos or text files), left-click the file and hit space
_APP_DESKTOP+=( gnome-session )                   ; _APP_INSTALL[gnome-session]="--pack"
_APP_DESKTOP+=( gnome-terminal )                  ; _APP_INSTALL[gnome-terminal]="--pack"
_APP_DESKTOP+=( default-jre )                     ; _APP_INSTALL[default-jre]="--pack"
_APP_DESKTOP+=( default-jdk )                     ; _APP_INSTALL[default-jdk]="--pack"
_APP_DESKTOP+=( openjdk-8-jdk )                   ; _APP_INSTALL[openjdk-8-jdk]="--pack"
_APP_DESKTOP+=( ubuntu-web-launchers )            ; _APP_INSTALL[ubuntu-web-launchers]="--pack"

# Media: Photo & Audio & Video
_APP_MEDIA+=( eog )                               ; _APP_INSTALL[eog]="--pack" # Eye of GNOME graphics viewer
_APP_MEDIA+=( gnome-photos )                      ; _APP_INSTALL[gnome-photos]="--pack"
_APP_MEDIA+=( gimp )                              ; _APP_INSTALL[gimp]="--flat org.gimp.GIMP"
_APP_MEDIA+=( digikam )                           ; _APP_INSTALL[digikam]="--appimg https://download.kde.org/stable/digikam/6.1.0/digikam-6.1.0-x86-64.appimage --set digikam"
_APP_MEDIA+=( shotwell )                          ; _APP_INSTALL[shotwell]="--pack"
_APP_MEDIA+=( exiftool )                          ; _APP_INSTALL[exiftool]="--pack" # libimage-exiftool-perl
_APP_MEDIA+=( inkscape )                          ; _APP_INSTALL[inkscape]="--pack"
_APP_MEDIA+=( librecad )                          ; _APP_INSTALL[librecad]="--pack"
_APP_MEDIA+=( gnome-music )                       ; _APP_INSTALL[gnome-music]="--pack"
_APP_MEDIA+=( rhythmbox )                         ; _APP_INSTALL[rhythmbox]="--pack"
_APP_MEDIA+=( picard )                            ; _APP_INSTALL[picard]="--flat org.musicbrainz.Picard"
_APP_MEDIA+=( audacity )                          ; _APP_INSTALL[audacity]="--flat org.audacityteam.Audacity"
_APP_MEDIA+=( spotify )                           ; _APP_INSTALL[spotify]="--flat com.spotify.Client"
_APP_MEDIA+=( totem )                             ; _APP_INSTALL[totem]="--pack" # GNOME Movie Player
_APP_MEDIA+=( ffmpeg )                            ; _APP_INSTALL[ffmpeg]="--pack"
_APP_MEDIA+=( vlc )                               ; _APP_INSTALL[vlc]="--flat org.videolan.VLC"
_APP_MEDIA+=( ubuntu-restricted-extras )          ; _APP_INSTALL[ubuntu-restricted-extras]="--pack"
_APP_MEDIA+=( libdvdnav4 )                        ; _APP_INSTALL[libdvdnav4]="--pack"
_APP_MEDIA+=( libdvdread4 )                       ; _APP_INSTALL[libdvdread4]="--pack"
_APP_MEDIA+=( gstreamer1.0-plugins-bad )          ; _APP_INSTALL[gstreamer1.0-plugins-bad]="--pack"
_APP_MEDIA+=( gstreamer1.0-plugins-ugly )         ; _APP_INSTALL[gstreamer1.0-plugins-ugly]="--pack"
_APP_MEDIA+=( libdvd-pkg )                        ; _APP_INSTALL[libdvd-pkg]="--pack --set libdvd" # fix: sudo dpkg-reconfigure libdvd-pkg

# Web & Communication & News
_APP_NET+=( google-chrome )                       ; _APP_INSTALL[google-chrome]="--deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
_APP_NET+=( chromium-browser )                    ; _APP_INSTALL[chromium-browser]="--pack"
_APP_NET+=( brave )                               ; _APP_INSTALL[brave]="--snap"
_APP_NET+=( epiphany-browser )                    ; _APP_INSTALL[epiphany-browser]="--pack"
_APP_NET+=( firefox )                             ; _APP_INSTALL[firefox]="--pack"
_APP_NET+=( dropbox )                             ; _APP_INSTALL[dropbox]="--deb https://linux.dropboxstatic.com/packages/ubuntu/dropbox_2.10.0_amd64.deb"
_APP_NET+=( nautilus-dropbox )                    ; _APP_INSTALL[nautilus-dropbox]="--pack"
_APP_NET+=( thunderbird )                         ; _APP_INSTALL[thunderbird]="--pack"
_APP_NET+=( geary )                               ; _APP_INSTALL[geary]="--pack"
_APP_NET+=( skype )                               ; _APP_INSTALL[skype]="--flat com.skype.Client"
_APP_NET+=( remmina )                             ; _APP_INSTALL[remmina]="--pack"
_APP_NET+=( filezilla )                           ; _APP_INSTALL[filezilla]="--pack"

# Development
_APP_DEV+=( atom )                                ; _APP_INSTALL[atom]="--set atom --snap=--classic"
_APP_DEV+=( sublimetext )                         ; _APP_INSTALL[sublimetext]="--flat com.sublimetext.three"
_APP_DEV+=( git )                                 ; _APP_INSTALL[git]="--pack"
_APP_DEV+=( python3-pip )                         ; _APP_INSTALL[python3-pip]="--pack"
# _APP_DEV+=( virtualbox )                          ; _APP_INSTALL[virtualbox]="--deb https://download.virtualbox.org/virtualbox/6.0.4/virtualbox-6.0_6.0.4-128413~Ubuntu~bionic_amd64.deb"
# _APP_DEV+=( vagrant )                             ; _APP_INSTALL[vagrant]="--deb https://releases.hashicorp.com/vagrant/2.2.4/vagrant_2.2.4_x86_64.deb"
_APP_DEV+=( virtualbox )                          ; _APP_INSTALL[virtualbox]="--fun _install_virtualbox"
_APP_DEV+=( vagrant )                             ; _APP_INSTALL[vagrant]="--fun _install_vagrant"
_APP_DEV+=( node )                                ; _APP_INSTALL[node]="--fun cmd_nodejs"
_APP_DEV+=( mysql-server )                        ; _APP_INSTALL[mysql-server]="--fun cmd_mysql"
_APP_DEV+=( poedit )                              ; _APP_INSTALL[poedit]="--pack"
_APP_DEV+=( gnome-builder )                       ; _APP_INSTALL[gnome-builder]="--pack" # + sysprof

# Games
_APP_GAME+=( aisleriot )                          ; _APP_INSTALL[aisleriot]="--pack"
_APP_GAME+=( gnome-mahjongg )                     ; _APP_INSTALL[gnome-mahjongg]="--pack"
_APP_GAME+=( gnome-sudoku )                       ; _APP_INSTALL[gnome-sudoku]="--pack"
_APP_GAME+=( gnome-mines )                        ; _APP_INSTALL[gnome-mines]="--pack"

# Utilities
_APP_UTILS+=( teamviewer )                        ; _APP_INSTALL[teamviewer]="--deb https://download.teamviewer.com/download/linux/teamviewer_amd64.deb"
_APP_UTILS+=( dconf-editor )                      ; _APP_INSTALL[dconf-editor]="--pack"
_APP_UTILS+=( gnome-tweak-tool )                  ; _APP_INSTALL[gnome-tweak-tool]="--pack"
_APP_UTILS+=( gparted )                           ; _APP_INSTALL[gparted]="--pack"
_APP_UTILS+=( anki )                              ; _APP_INSTALL[anki]="--flat net.ankiweb.Anki"
_APP_UTILS+=( enpass )                            ; _APP_INSTALL[enpass]="--repo 'deb http://repo.sinew.in/ stable main' --key https://apt.enpass.io/keys/enpass-linux.key"
_APP_UTILS+=( gnome-notes )                       ; _APP_INSTALL[gnome-notes]="--pack"
_APP_UTILS+=( bijiben )                           ; _APP_INSTALL[bijiben]="--pack"
_APP_UTILS+=( gnome-todo )                        ; _APP_INSTALL[gnome-todo]="--pack"
_APP_UTILS+=( gnome-documents )                   ; _APP_INSTALL[gnome-documents]="--pack"
_APP_UTILS+=( gnome-disk-utility )                ; _APP_INSTALL[gnome-disk-utility]="--pack"
_APP_UTILS+=( gnome-usage )                       ; _APP_INSTALL[gnome-usage]="--pack" # = yelp
_APP_UTILS+=( yelp )                              ; _APP_INSTALL[yelp]="--pack"
_APP_UTILS+=( gnome-characters )                  ; _APP_INSTALL[gnome-characters]="--pack" # default snap
_APP_UTILS+=( gnome-logs )                        ; _APP_INSTALL[gnome-logs]="--pack" # default snap
_APP_UTILS+=( gnome-system-monitor )              ; _APP_INSTALL[gnome-system-monitor]="--pack" # default snap
_APP_UTILS+=( transmission )                      ; _APP_INSTALL[transmission]="--pack"
_APP_UTILS+=( seahorse )                          ; _APP_INSTALL[seahorse]="--pack"
_APP_UTILS+=( usb-creator-gtk )                   ; _APP_INSTALL[usb-creator-gtk]="--pack"
_APP_UTILS+=( tlp )                               ; _APP_INSTALL[tlp]="--pack --set tlp"
_APP_UTILS+=( gnome-power-manager )               ; _APP_INSTALL[gnome-power-manager]="--pack"

# Fonts App List
_APP_FONT+=( fonts-font-awesome )                 ; _APP_INSTALL[fonts-font-awesome]="--pack"
_APP_FONT+=( fonts-lato )                         ; _APP_INSTALL[fonts-lato]="--pack"
_APP_FONT+=( fonts-roboto )                       ; _APP_INSTALL[fonts-roboto]="--pack"
_APP_FONT+=( ttf-mscorefonts-installer )          ; _APP_INSTALL[ttf-mscorefonts-installer]="--pack"
# Font packages list: apt-cache search -n '^fonts-*' | awk '{print $1}'

# Quick-start List: Non-favorite Apps
#
# If you want to mark (☠) a package then add it to your non-favorite list
#
# The non-favorite apps will not be automatically removed.
# If these apps exist on the applications lists, then they will be only UNCHECKING or
# CHECKING on the - installing or removing - lists, depending on the following.
#
#  Default:
# |-----------------------------------------------|-----------------|----------------|
# |                App / Package                  | Installing List | Removing List  |
# |------------------------------------------|----|-----------------|----------------|
# | if not present on your system            | ✖  |                 |                |
# |   and present on 'non-favorite list'     |    | unchecked       | unchecked      |
# |   and not present on 'non-favorite list' |    | unchecked       | unchecked      |
# |   and present on 'favorite list'         |    | CHECKED         | unchecked      |
# |   and not present on 'favorite list'     |    | unchecked       | unchecked      |
# |------------------------------------------|----|-----------------|----------------|
# | if present on you system                 | ✔  |                 |                |
# |   and present on 'non-favorite list'     |    | unchecked       | CHECKED        |
# |   and not present on 'non-favorite list' |    | unchecked       | unchecked      |
# |   and present on 'favorite list'         |    | unchecked       | unchecked      |
# |   and not present on 'favorite list'     |    | unchecked       | unchecked      |
# |------------------------------------------|----|-----------------|----------------|
#
_APP_NON_FAVORITE=(
  ubuntu-web-launchers
  transmission
  gnome-characters
  gnome-logs
  gnome-system-monitor
  gnome-builder
  gnome-documents
  bijiben
  transmission-gtk
  gnome-power-manager
  gnome-weather
  gnome-maps
  usb-creator-gtk
  gnome-clocks
  gnome-todo
  shotwell
  seahorse
)

# Quick-start List: Favorite Apps
#
_APP_PREFER+=(
  google-chrome
  firefox
  thunderbird
  eog
  skype
  teamviewer
  ubuntu-restricted-extras
  tlp
)
_APP_PREFER+=( ${_APP_DESKTOP[@]} ${_APP_FONT[@]} ) # Add some full app list
for i in "${_APP_PREFER[@]}"; do    # Remove non-favorite apps
  _SKIP=""
  for j in "${_APP_NON_FAVORITE[@]}"; do
    [[ $i == $j ]] && { _SKIP=1; break; }
  done
  [[ -n $_SKIP ]] || _APP_FAVORITE+=("$i")
done


# Print short description of package (default value is disable, as it slow down the script)
_SHOW_DESC=${_SHOW_DESC:-0}

# Collect message(s) to an array and print in the end
_SCRIPT_MESSAGES=()

# Whiptail: Changing colours
#
# Return:
#   Dialog box with custom colours
#
export NEWT_COLORS="checkbox=black,lightgray"

# Whiptail: Set right dimensions for your whiptail dialog box (without xterm resizing!)
#
# Usage:
#   You can calculate the best box size by this: `$LINES $COLUMNS $(( $LINES - 8 ))`
#
# Variables:
#   $LINES:  height dimension (LINES) of current terminal window
#   $COLUMS: width dimension (COLUMNS) of current terminal window
#
# Returns:
#   Dimension of the current terminal window
#
_dimension() {
  LINES=""; LINES=$(tput lines); COLUMNS=""; COLUMNS=$(tput cols)
}

# Check if one element value exists in a list or array
#
# Usage:
#   _contains "$_element" "${_list[*]}"
#
# Args:
#   $1 (required): element
#   $2 (required): array/list
#
# Returns:
#   0  If the item is included in the list.
#   1  If not.
#
_contains() {
  local _list=(${*:2})
  for _element in "${_list[@]:-}"; do [[ "${_element}" == "${1}" ]] && return 0; done
  return 1
}

# Version controll
#
# Usage:
# if _check_version "$version_1" "$version_2"; then
#        echo "$version_1 is greater than $version_2!"
# fi
#
_check_version() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

# Spinner
#
# Usage:
#  (function or command) &
#  _spinner $! "Comment here..."
#
_spinner(){
  local pid=$1
  local delay=0.5
  local spinstr='|/-\'
  [[ -n $2 ]] && printf "%b\n" "$2"
  printf "Please wait... "
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [%c]  "  "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
  printf "DONE!\n"
}

# Cheking System
#
# Returns:
#   Error  If the system is not Linux, or can't check which distro you are using.
#   Error  If the distro is not be full compatible with this script.
#   Error  If you want to run this script on virtual environment.
#   ...otherwise the script is running.
#
_check_os_and_distro() {
  # Check OS
  [[ $(uname) != "Linux" ]] && printf "Sorry! This script only suports Linux!\nExiting...\n" && exit 1
  # Check distribution
  if [[ $(which lsb_release &>/dev/null; echo $?) -ne 0 ]]; then
    printf "Sorry! Can't be checked which distribution you are using!\nExiting...\n"
    exit 1
  else
    if ! lsb_release -ds | grep -qE '(Ubuntu|Mint|elementary|Debian)'; then
      if ! (whiptail --title "Warning" --yesno "You are using a distribution that may not be full compatible with this script. Are you sure you want to continue?" 10 50); then
        exit 1
      fi
    fi
  fi
}

# Check system environment
#
# Usage:
#   if ! _check_desktop; then
#     echo "This function helps building apps on desktop environment. It's not recommended to run on virtual environment."
#   fi
#
# Return:
#   0   Desktop, if you run this script on desktop environment.
#   1   Server, if you run this script on virtual environment.
#
_check_desktop() {
  # Check chassis
  if [[ ${_VAR[Environment]} == "vm" ]]; then
    _CHAS_MESSAGE="This command \`${_CMD}\` helps building apps on desktop environment.\nIt's not recommended to run on server environment."
    return 1
  else
    _CHAS_MESSAGE="This command \`${_CMD}\` helps building apps on server environment.\nIt's not recommended to run on desktop environment."
    return 0
  fi
}

# Check timezone
#
# Return:
#   0        If set and not equal UTC
#   setting  If not set or equal UTC
#
_check_timezone() {
  if [[ "${_VAR[Timezone]}" == "Etc/UTC" ]] || [[ "${_VAR[Timezone]}" == "" ]]; then
    printf "Current timezone on system: %s\n" "${_VAR[Timezone]}"
    read -p "Do you want to set a new timezone? [y/n] " REPLY
    if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
      local _SET_TIMEZONE=$(whiptail --inputbox "\nEnter the new time zone (format: Continent/City):" 8 75 --title "Timezone Setting" 3>&1 1>&2 2>&3)
      if [[ $(timedatectl list-timezones | grep "${_SET_TIMEZONE}" &> /dev/null; echo $?) != "0" ]]; then
        _error "invalid timezone --'${_SET_TIMEZONE}'"
      else
        sudo timedatectl set-timezone "${_SET_TIMEZONE}" && whiptail --title "Success" --msgbox "The timezone changed to ${_SET_TIMEZONE}." 7 80
        _VAR[Timezone]="${_SET_TIMEZONE}"
      fi
    fi
  else
    return 0
  fi
}

# Check git config
#
_check_git_config() {
  if hash git 2>/dev/null; then
    if [[ -z "$(git config user.name)" ]] || [[ -z "$(git config user.email)" ]]; then
      printf "Git is installed, but missing your Git identity.\nThis is important because every Git commit uses this information.\n"
      read -p "Do you want to set your user name and email address? [y/n] " REPLY
      if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
        local _USER_GIT=$(whiptail --inputbox "\nEnter the name for Git user:" 8 75 --title "Git Setting" 3>&1 1>&2 2>&3)
        local _EMAIL_GIT=$(whiptail --inputbox "\nEnter the e-mai adress for Git user:" 8 75 --title "Git Setting" 3>&1 1>&2 2>&3)
        git config --global user.name "${_USER_GIT}"
        git config --global user.email "${_EMAIL_GIT}"
      fi
    fi
  fi
}

# Determine if a package exists
#
# Usage:
#   if [[ $(_check_package_exists "packagename") == 0 ]]; then
#     echo "packagename is installed."
#   fi
#
#   _check_package_exists --print-status "packagename"
#
# Option:
#   --print-status  Print package status information, if the package exists ... for example:
#       ✔ (pack+snap)       If the package is installed from two sources as well.
#       ✔ (snap)            If the package is installed.
#       ✔ (~/.local/bin)    If the package is present on your system, for example as an AppImage [~/.local/bin].
#       ✖ ()                If not.
#
# Arg:
#   $1 (required): Name of package
#
# Returns:
#   0  If the package is installed.
#   1  If not.
#
_check_package_exists() {
  if [ $# -gt 2 ]; then
    echo "Error: Too many arguments in ${FUNCNAME[0]}() function!"
    exit 1
  elif [ $# -eq 2 ]; then
    if [ "${1}" != "--print-status" ]; then
      echo "Error: Unrecognized option in ${FUNCNAME[0]}() function: \`${1}\`!"
      exit 1
    fi
    local _PACKAGE=${2}
  else
    local _PACKAGE=${1}
  fi
  local _COUNT=0; local _SOURCE=(); local _INSTALL_STATUS="✔" # https://coolsymbol.com/
  # Software Source: main, universe, restricted, multiverse, etc....
  #
  # Attention: `which`, `hash` or `type` are not always 100% reliable checking methods (See, for example: software-properties-common or snapd):
  # `hash "${_PACKAGE}"` or `type -P "${_PACKAGE}"` or `which "${_PACKAGE}"`
  #
  # Use instead of them something else. Maybe this command good for us: `dpkg-query`, or use them all.
  #
  if [[ $(dpkg-query -W --showformat='${Status}\n' ${_PACKAGE} 2>/dev/null | grep "install ok installed" &> /dev/null; echo $?) == 0 ]]; then
    let _COUNT+=1
    _SOURCE+=( pack )
  fi
  if [[ $(type -P "${_PACKAGE}" &> /dev/null; echo $?) == 0 ]]; then
    let _COUNT+=1
    if [ "$(type -P "${_PACKAGE}")" == "/usr/bin/${_PACKAGE}" ]; then
      if ! _contains "pack" "${_SOURCE[*]}"; then
        _SOURCE+=( pack )
      fi
    fi
    if [[ "$(type -P "${_PACKAGE}")" == *"$HOME/.local/bin"* ]]; then
      _SOURCE+=( \~/.local/bin )
    fi
    if [[ "$(type -P "${_PACKAGE}")" == *"$HOME/.nvm"* ]]; then
      _SOURCE+=( \~/.nvm )
    fi
    if [ -f "/usr/local/share/${_PACKAGE}/Makefile" ]; then
      _SOURCE+=( complied )
    fi
  fi
  # Software Source: Snap Store
  #
  # Checking:
  #   $(snap list 2>/dev/null | grep "" &>/dev/null; echo $?)
  #
  # Return:
  #   0  Yes, snaps is installed.
  #   1  No snaps are installed yet.
  #
  if [[ $(snap list 2>/dev/null | grep "" &>/dev/null; echo $?) == 0 ]]; then
    if [[ $(snap list | grep "^${_PACKAGE}" &> /dev/null; echo $?) == 0 ]]; then
      let _COUNT+=1
      _SOURCE+=( snap )
    fi
  fi
  # Software Source: Flat Store
  if hash flatpak 2>/dev/null; then
    if [[ $(flatpak list | grep "${_PACKAGE}" &> /dev/null; echo $?) == 0 ]]; then
      let _COUNT+=1
      _SOURCE+=( flat )
    fi
  fi
  if [ "${1}" == "--print-status" ]; then
    if [[ "${_COUNT}" -eq 0 ]]; then
      _INSTALL_STATUS="✖"
      _SOURCE+=( " -- " )
    fi
    # Print status and info of sources
    (IFS="+$IFS"; printf '%s (%s)' "${_INSTALL_STATUS}" "${_SOURCE[*]}")
  else
    if [[ "${_COUNT}" -gt 0 ]]; then
      echo 0
    else
      echo 1
    fi
  fi
}

# Script dependencies
#
_check_dependencies() {
  local _MISSING_PACK=();
  for _REQ_PACK in whiptail wget; do
    if ! hash "${_REQ_PACK}" 2>/dev/null; then
      _MISSING_PACK+=("${_REQ_PACK}")
    fi
  done
  if [ -n "${_MISSING_PACK}" ]; then
    printf "This script requires some packages,\nbut the following are not present on your system.\n"
    printf "  * %s\n" "${_MISSING_PACK[@]}"
    read -p 'Would you like to install these packages to continue? [Y/n] ' REPLY
    case $REPLY in
      [Yy]*)
        sudo apt install -y "${_MISSING_PACK[*]}" ;;
      [Nn]*) printf "Exiting...\n" && exit ;;
      * ) printf "Sorry, try again.\n" && _check_dependencies ;;
    esac
  fi
}

# Exit with an error and print the specified message
#
# Usage:
#   _error "Error message. Variable: $0"
#
_error() {
  printf "\n$(tput bold)$(tput setaf 1)  ✖  Error: %s$(tput sgr0)\n\n" "${*}" 1>&2
  exit 1
}

# Get commands and command functions
#
# A function will be a command if its name contains the `cmd _` prefix.
#
# Returns:
#   ${_CMD_FUNCTIONS[@]}   command function name in array
#   ${_CMD_ALLOWED[@]}     allowed name of command
#
_get_command_functions() {
  local _function_list=($(printf "%s" "$(declare -F)" | sed -e "s/declare -f //g"))
  for _name in "${_function_list[@]}"; do
    if [[ "${_name}" =~ ^cmd_(.*) ]]; then
      _CMD_FUNCTIONS+=("${_name}")
      _CMD_ALLOWED+=($(printf "%s" "${_name}" | sed -e "s/cmd_//g"))
    fi
  done
}

# The primary function for starting the program.
#
_main() {
  # Checking things
  _check_os_and_distro
  _check_dependencies
  ! _check_desktop && _check_timezone
  _check_desktop &&  _check_git_config
  # Load allowed command
  _get_command_functions

  # Default command
  [[ -z "${_CMD:-}" ]] && _CMD=${1:-menu}

  if ( [[ -n "${_CMD}" ]] && _contains "${_CMD}" "${_CMD_ALLOWED[*]}"); then
    # If the command is defined, run its function...
    cmd_"${_CMD}" "${@:2}"
  else # If the command is not defined, run this...

    # Options parser
    _OPTS=$(getopt --options h,u,c,i,e,d,s,v --long help,debug,update,clean,info,error,desktop,setting,version --name "$(basename "${0}")" -- "${@}")
    if [ $? != 0 ] ; then _error "invalid option(s) or missing command" ; fi
    eval set -- "${_OPTS}"

    while true ; do
      case "${1}" in
        -h|--help)    cmd_help ${_CMD}  ; shift ;;
        --debug)      set -x ; _DEBUG=true ; cmd_menu ; shift ;;
        -u)           _system_update    ; shift ;;
        --update)     _script_update    ; shift ;;
        -c|--clean)   _system_cleanup   ; shift ;;
        -i|--info)    _system_info      ; shift ;;
        -e|--error)   _system_error     ; shift ;;
        -d|--desktop) _create_desktop   ; shift ;;
        -s|--setting) _system_settings  ; shift ;;
        -v|--version)
          printf "%s\n" "${_VERSION}"
          shift ;;
        --) shift ; break ;;
        *) _error "internal option error '${1}'"
      esac
    done
  fi
}

# COMMAND: Help
#
# Usage (optional):
#   ```
#   _HELP[command]=$(cat << HELPSOMETHING
#     Usage: ...
#   HELPSOMETHING
#   )
#
#   cmd_command() {
#     echo -n
#   }
#   ```
# Declare command in array without `cmd_` prefix and use in name of function with `cmd_` prefix
#
declare -A _HELP[help]=$(cat << HELPCMD
The menu command displays the help information for '$(basename "${0}")' or
a specified command.

Usage:
  $(basename "${0}") -h | --help
  $(basename "${0}") help <command>

HELPCMD
)

cmd_help() {
  if ( [[ $# -gt 0 ]] && [[ ! "${1}" =~ ^- ]] ); then
    # Help to specific command
    if _contains "${1}" "${_CMD_ALLOWED[*]}"; then
      if _contains "${1}" "${!_HELP[*]}"; then
        printf "%b\n\n" "${_HELP[${1}]}"
      else
        printf "No additional information for '%s'\n" "${1}"
      fi
    else
      printf "Sorry, '%s' is not an allowed command!\n\nAllowed command(s):\n" "${1}"
      printf " %s\n" "${_CMD_ALLOWED[@]}"
    fi
  else
    cat << HELPDESKTOP
The $(basename "$0") is a post install script to help building and setting your system.

  Usage:
    Run '$(basename "${0}")' without options and arguments in interactive mode
    $(basename "${0}") [commands] [options] [<arguments>...]

  Options:
    -u                  Update system
    -c, --clean         Cleanup system
    -s, --setting       Configure system
    -i, --info          Display system information
    -e, --error         Display error information (\`dmesg\`)
    -d, --desktop       Creating a desktop file
    -v, --version       Print this script version number
        --update        Update this script (from github)
    -h, --help          Display this help
        --debug         Run debug mode

  Commands:
    $(printf " %s" "${_CMD_ALLOWED[@]}")

For more information about a command, run '$(basename "${0}") help <command>'
HELPDESKTOP
  fi
  exit
}

# COMMAND: Whiptail Main Menu
#
# Return:
#   Whiptail menu dialog box
#
_HELP[menu]=$(cat << HELPMENU
The menu command displays an interactive menu.

  Usage: $(basename "${0}") | $(basename "${0}") menu
HELPMENU
)

cmd_menu(){
  _dimension
  if _check_desktop; then
    _MENU_MAIN=$(whiptail --title "Desktop Main Menu" --menu "\n   What would you like to do? Choose an option..." --cancel-button "Quit" --notags $LINES $COLUMNS $(( $LINES - 10 )) \
        "cmd_menu" "SYSTEM" \
        "_system_update" "  Update" \
        "_system_cleanup" "  Cleaning" \
        "_system_info" "  Print Info" \
        "_system_error" "  Print Error" \
        "cmd_menu" "" \
        "cmd_menu" "QUICK START" \
        "_menu_sub install _APP_FAVORITE 'Install - Favorite Apps' 'Install'" "  Install Favorite Apps ▸" \
        "_menu_sub remove _APP_NON_FAVORITE 'Removing - Non Favorite Apps' 'Uninstall'" "  Uninstall Non-Favorite Apps ▸" \
        "cmd_menu" "" \
        "cmd_menu" "INSTALLING APPLICATIONS" \
        "_menu_sub install _APP_DESKTOP 'Install - Desktop Application' 'Install'" "  Desktop ▸" \
        "_menu_sub install _APP_MEDIA 'Install - Media Application' 'Install'" "  Media ▸" \
        "_menu_sub install _APP_NET 'Install - Web & Communication Application' 'Install'" "  Net ▸" \
        "_menu_sub install _APP_UTILS 'Install - Utilities' 'Install'" "  Utils ▸" \
        "_menu_sub install _APP_DEV 'Install - Apps for Development' 'Install'" "  Development ▸" \
        "_menu_sub install _APP_GAME 'Install - Games' 'Install'" "  Games ▸" \
        "_menu_sub install _APP_FONT 'Install - Fonts' 'Install'" "  Fonts ▸" \
        "cmd_menu" "" \
        "cmd_menu" "REMOVING APPLICATIONS" \
        "_menu_sub remove _APP_DESKTOP 'Remove - Desktop Application' 'Uninstall'" "  Desktop ▸" \
        "_menu_sub remove _APP_MEDIA 'Remove - Media Application' 'Uninstall'" "  Media ▸" \
        "_menu_sub remove _APP_NET 'Remove - Web & Communication Application' 'Uninstall'" "  Net ▸" \
        "_menu_sub remove _APP_UTILS 'Remove - Utilities' 'Uninstall'" "  Utils ▸" \
        "_menu_sub remove _APP_DEV 'Remove - Apps for Development' 'Uninstall'" "  Development ▸" \
        "_menu_sub remove _APP_GAME 'Remove - Games' 'Uninstall'" "  Games ▸" \
        "_menu_sub remove _APP_FONT 'Remove - Fonts' 'Uninstall'" "  Fonts ▸" \
        "cmd_menu" "" \
        "cmd_menu" "SETTINGS" \
        "_menu_show_desc" "  Show App Info" \
        "_java_settings" "  Config Java" \
        "_system_settings" "  Setting System" \
      3>&1 1>&2 2>&3)
  else
    _MENU_MAIN=$(whiptail --title "Server Main Menu" --menu "\n   What would you like to do? Choose an option..." --cancel-button "Quit" --notags $LINES $COLUMNS $(( $LINES - 10 )) \
        "cmd_menu" "SYSTEM" \
        "_system_update" "  Update" \
        "_system_cleanup" "  Cleaning" \
        "_system_info" "  Print Info" \
        "_system_error" "  Print Error" \
        "cmd_menu" "" \
        "cmd_menu" "INSTALLING" \
        "cmd_lemp" "  LEMP Stack" \
        "cmd_nginx" "  Nginx" \
        "cmd_mysql" "  MySQL" \
        "cmd_php" "  Php" \
        "cmd_odoo" "  Odoo" \
        "cmd_nodejs" "  Node" \
        "cmd_menu" "" \
        "cmd_menu" "SETTINGS" \
        "_nginx_block" "  Nginx Server Block" \
        "_system_settings" "  Setting System" \
        "_menu_purge_cache" "  Purge FastCGI Cache" \
      3>&1 1>&2 2>&3)
  fi
  if [ $? = 0 ]; then
    ${_MENU_MAIN}
  else
    echo "Bye!"
    exit 0
  fi
}

# Helps to build a whiptail checklist for applications
#
# Args:
#   $1 (required): install or remove
#   $2 (required): name of array
#
# Return:
#   Checklist for whiptail submenu into ${_APP_LIST[@]}
#
_menu_checking_list() {
  # Clear the previous list and create a new updated one
  unset _APP_LIST
  # Set list array
  _LIST_ARRAY="$2[@]"
  # Description for package
  _APP_DESC=""
  # Get length of list array for steps in process
  local _STEP=0; local _LIST_LENGTH=$(echo "${!_LIST_ARRAY}" | wc -w)
  # Build the list
  local _PACKAGE=""
  for _PACKAGE in "${!_LIST_ARRAY}"; do
    # Print package's description as well
    if [[ "${_SHOW_DESC}" -eq 1 ]]; then
      if [[ $(apt-cache show "${_PACKAGE}" &> /dev/null; echo $?) == 0 ]]; then
        _APP_DESC=" -$(apt-cache show "${_PACKAGE}" | grep "Description-en" | cut -d: -f 2)" || true
      fi
    fi

    # Set package install status
    _install_status="$(_check_package_exists --print-status "${_PACKAGE}")"

    #Set checked status
    _install_list_check="OFF"
    _remove_list_check="OFF"

    # Set, if app is present on the 'non-favorite list'
    if _contains "${_PACKAGE}" "${_APP_NON_FAVORITE[@]}"; then
      _mark_non_favorite=" ☠  "
      [[ "${_install_status}" != "✖ ( -- )" ]] && _remove_list_check="ON"
    else
      _mark_non_favorite=""
    fi
    if _contains "${_PACKAGE}" "${_APP_FAVORITE[@]}"; then
      [[ "${_install_status}" == "✖ ( -- )" ]] && _install_list_check="ON"
    fi

    # Create whiptail commands
    if [[ "${1}" == "install" ]]; then
      _APP_LIST+=("cmd_install --app ${_PACKAGE} ${_APP_INSTALL[$_PACKAGE]}" "${_install_status} ${_mark_non_favorite}${_PACKAGE}${_APP_DESC}" ${_install_list_check})
    elif [[ "${1}" == "remove" ]]; then
      _APP_LIST+=("cmd_remove --app ${_PACKAGE}" "${_install_status} ${_mark_non_favorite}${_PACKAGE}${_APP_DESC}" ${_remove_list_check})
    else
      echo "Error line $LINENO: Menu command is wrong!"; exit
    fi

    # Progress while building the list
    # if [[ "${_SHOW_DESC}" -eq 1 ]]; then
    (( _STEP+=$(( 100 / ${_LIST_LENGTH} +1 )) ))
    echo XXX
    echo $(( $_STEP ))
    echo -e "\nUpdating package information: ${_PACKAGE}"
    echo XXX
    # fi
    # done  > >([[ "${_SHOW_DESC}" -eq 1 ]] && whiptail --title "Please wait..." --gauge "\nUpdating package information: " 8 70 0)
  done > >(whiptail --title "Please wait..." --gauge "\nUpdating package information: " 8 70 0)
}

# Whiptail: Submenu for actions
#
# Usage:
#   _menu_sub install _APP_COMMON 'Installing Commonly Used Application' 'Install'
#
# Args:
#   $1 (required): install or remove
#   $2 (required): Name of array
#   $3 (required): Checklit title
#   $4 (required): Checklist OK button text
#
# Return:
#   Whiptail checklist, where can you start the command for installing or removing
#
_menu_sub() {
  _dimension
  # Keep it for the return
  _preserved_command="${@}"
  eval set -- "${@}"
  # Build a list
  _menu_checking_list "${@}"
  # Checklist
  _CHECK_LIST=$(whiptail --title "${3}" --checklist "\n   Choose one or more apps to ${1}...\n\n   installed     : ✔ (sources)\n   not installed : ✖ ( -- )\n   non-favorite  : ☠\n   -------------------------------------\n" \
      --separate-output --cancel-button "Back to Main Menu" --ok-button "${4}" --notags \
      $LINES $COLUMNS $(( $LINES - 14 )) \
      "${_APP_LIST[@]}" \
    3>&1 1>&2 2>&3)
  if [ ${?} = 0 ]; then
    i=0
    while read line; do
      _SELECTED_APPS[${i}]=${line}
      i=$(($i+1))
    done <<< "${_CHECK_LIST}"
    if [[ -z "${_SELECTED_APPS[@]}" ]]; then
      whiptail --title "Info" --yes-button "Back" --no-button "Quit" --yesno "Nothing selected, so nothing happened!" 7 45 || exit
    else
      for _MENU_SUB in "${_SELECTED_APPS[@]}"; do
        ${_MENU_SUB}
      done
      if [[ -z "${_SCRIPT_MESSAGES[@]}" ]]; then
        whiptail --title "Success" --yes-button "Back to List" --no-button "Quit" --yesno "The selected application(s) has been ${1}ed." 7 53 || exit
      else
        # Print message
        whiptail --scrolltext --title "Script Messages" --yes-button "OK" --no-button "Quit" --yesno "$(printf "%b\n" "${_SCRIPT_MESSAGES[@]}")" 10 75 || exit
      fi
    fi
    _menu_sub "${_preserved_command}"
  else
    cmd_menu
  fi
}

# Whiptail: Package's description settings
#
# Return:
#   Whiptail radiolist
#
_menu_show_desc() {
  if [[ "$_SHOW_DESC" == 1 ]]; then
    _SHOW_DESC_ENABLE="ON"; _SHOW_DESC_DISABLE="OFF"
  else
    _SHOW_DESC_ENABLE="OFF"; _SHOW_DESC_DISABLE="ON"
  fi
  _SHOW_DESC_OPTIONS=$( whiptail --notags --title "Show Packages' Description" --radiolist "\nDisplay information of applications in selection menus. Enabling slows down script execution!" 10 65 2 \
      "1" "Enable" $_SHOW_DESC_ENABLE \
      "0" "Disable (default)" $_SHOW_DESC_DISABLE \
    3>&1 1>&2 2>&3)
  if [ ${?} = 0 ]; then
    _SHOW_DESC=$_SHOW_DESC_OPTIONS
  fi
  cmd_menu
}

# System updating
#
_system_update() {
  # Enable software from Canonical's 'partner' repository
  sudo sed -i "/deb http:.* partner/s/^# //" /etc/apt/sources.list
  printf "Refresh repository... Please wait... "
  sudo apt update -qq
  if hash flatpak 2>/dev/null; then
    printf "Flatpak... "
    sudo flatpak update -y
  fi

  # Upgrading packages if necessary
  if [[ $(LANG=C apt-get upgrade -s | grep -P '^\d+ upgraded'| cut -d" " -f1) != 0 ]]; then
    sudo apt upgrade -y
  fi

  # Install translations if language support is not installed completely
  if [[ -n "$(check-language-support)" ]]; then
    sudo apt install -y $(check-language-support)
  fi
}

# Script updating from GitHub
#
_script_update() {
  if [[ "$(wget -qO- https://raw.githubusercontent.com &>/dev/null; echo $?)" == 0 ]]; then
    local _PATH_TO_THIS_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "$0")"
    # Check if file is a symbolic link and if yes get real link
    if [[ -L "${_PATH_TO_THIS_SCRIPT}" ]]; then
      _PATH_TO_THIS_SCRIPT="$(readlink -f "${_PATH_TO_THIS_SCRIPT}")"
    fi
    # Download script file
    wget -qO- https://raw.githubusercontent.com/fereber/AppBuilder/master/AppBuilder -O "${_PATH_TO_THIS_SCRIPT}"
    chmod +x "${_PATH_TO_THIS_SCRIPT}"
  else
    _error "updating failed, maybe is no internet connection..."
  fi
}

# System cleaning
#
_system_cleanup() {
  # Remove leftover config files
  if [[ -z "$(COLUMNS= dpkg -l | grep '^rc' | tr -s ' ' | cut -d ' ' -f 2)" ]]; then
    printf "There aren't leftover config files.\n"
  else
    printf "Remove leftover config files:\n"
    sudo dpkg --purge $(COLUMNS= dpkg -l | grep '^rc' | tr -s ' ' | cut -d ' ' -f 2)
  fi

  # Flatpak unused applications
  if hash flatpak 2>/dev/null; then
    printf "Unused Flatpak package(s)... "
    sudo flatpak uninstall -y --unused
  fi

  # Clean packages cache
  sudo apt clean

  # Remove orphaned packages
  if [[ $(LANG=C apt-get autoremove -s | grep -P '^\d+ upgraded'| cut -d" " -f6) -ne 0 ]]; then
    sudo apt autoremove -y -qq
  fi
}

# Configure System
#
_system_settings() {

  # UFW enable
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  sudo ufw allow ssh comment 'Connection to ssh' &>/dev/null  && printf "  ⇢  Ufw rule: allow SSH\n"
  if [[ "${_VAR[Firewall]}" != "active" ]]; then
    sudo ufw --force enable
  fi
  sudo ufw reload

  if _check_desktop; then
    # Hidde things...
    [[ $(cat ~/.hidden 2> /dev/null | grep -q "snap"; echo $?) != 0 ]] && echo "snap" >> ~/.hidden

    # Gsettings
    gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top true
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'LEFT'
    gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true
    gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
    gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots-color '#dddddd'
    # gsettings set org.gnome.shell enabled-extensions "['alternate-tab@gnome-shell-extensions.gcampax.github.com', 'ubuntu-appindicators@ubuntu.com', 'ubuntu-dock@ubuntu.com', 'drive-menu@gnome-shell-extensions.gcampax.github.com', 'user-theme@gnome-shell-extensions.gcampax.github.com']"
    gsettings set org.gnome.desktop.interface clock-format 24h
    gsettings set org.gnome.desktop.interface clock-show-date true
    gsettings set org.gnome.desktop.screensaver lock-delay '30'
    gsettings set org.gnome.desktop.interface show-battery-percentage true
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita'
    gsettings set org.gnome.Terminal.Legacy.Settings theme-variant 'dark'
    gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'
    gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-automatic true
    gsettings set org.gnome.desktop.privacy remember-recent-files true
    gsettings set org.gnome.desktop.privacy recent-files-max-age '14'
    gsettings set org.gnome.desktop.privacy remove-old-temp-files true
    gsettings set org.gnome.desktop.privacy remove-old-trash-files true
    gsettings set org.gnome.desktop.privacy old-files-age '14'
    gsettings set org.gnome.desktop.privacy send-software-usage-stats false

    # Disabling crash dialogs
    if [[ $(cat '/etc/default/apport' | grep -q 'enabled=0'; echo $?) != 0 ]]; then
      sudo sed -i "s/enabled=1/enabled=0/g" /etc/default/apport
    fi

    # Displaying hidden startup applications
    sudo sed -i "s/NoDisplay=true/NoDisplay=false/g" /etc/xdg/autostart/*.desktop

    # Set swappiness, if its current value is greater than 10% [system default is 60%]
    # The swap file will then only be used when the RAM usage is around 90 percent.
    if [[ "$(cat /proc/sys/vm/swappiness)" -gt 10 ]]; then
      if [[ "$(grep "vm.swappiness" /etc/sysctl.conf &>/dev/null; echo $?)" != 0 ]]; then
        echo "vm.swappiness = 10" | sudo tee -a /etc/sysctl.conf
      else
        sudo sed -i "s/vm.swappiness.*/vm.swappiness = 10/g" /etc/sysctl.conf
      fi
    fi
  fi
}

# Configure Java
#
_java_settings() {
  if hash java 2>/dev/null; then
    sudo update-alternatives --config java
  else
    printf "Java is not  installed on the system yet.\n"
    read -p "Do you want me to update? [y/n] " REPLY
    if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
      sudo apt install -y default-jre default-jdk openjdk-8-jdk
    else
      cmd_menu
    fi
  fi
}

# Creating a desktop file
#
# Args:
#   $1 (required): Package name
#
# Return:
#   Desktop file, that will be located in $HOME/.local/share/applications/ folder.
#
_create_desktop() {

  [[ -z "${1}" ]] && local _NAME=$(whiptail --inputbox "\nWhat is your package name?" 8 75 "" --title "Create a desktop file" 3>&1 1>&2 2>&3)
  [[ -z "${_NAME:-$1}" ]] && _error "required an argument -'Name Application'"

  if "${_FIRST_CHECK:-true}"; then
    if [ -f "$HOME/.local/share/applications/${_NAME:-$1}.desktop" ]; then
      whiptail --title "Desktop File is already exists for ${_NAME:-$1}" --textbox $HOME/.local/share/applications/"${_NAME:-$1}".desktop 16 60
      whiptail --title "Info" --yes-button "Ok" --no-button "Modify" --yesno "Is it OK, or do you want modify the desktop file!" 7 45 && exit
    fi
  fi

  [[ -z "${2}" ]] && local _DESCRIPTION=$(whiptail --inputbox "\nAdd a 'Description' for the package" 8 75 "" --title "Create a desktop file" 3>&1 1>&2 2>&3)
  [[ -z "${3}" ]] && local _EXEC=$(whiptail --inputbox "\nAdd an 'Exec' for the package" 8 75 "" --title "Create a desktop file" 3>&1 1>&2 2>&3)
  [[ -z "${4}" ]] && local _TRY_EXEC=$(whiptail --inputbox "\nAdd a 'TryExec' for the package" 8 75 "" --title "Create a desktop file" 3>&1 1>&2 2>&3)
  [[ -z "${5}" ]] && local _ICON_NAME=$(whiptail --inputbox "\nAdd an 'Icon' path for the package" 8 75 "" --title "Create a desktop file" 3>&1 1>&2 2>&3)

  cat > /tmp/"${_NAME:-$1}".desktop <<DESKTOPFILE
[Desktop Entry]
Name=${_NAME:-$1}
Comment=${_DESCRIPTION:-$2}
Exec=${_EXEC:-$3}
TryExec=${_TRY_EXEC:-$4}
Icon=${_ICON_NAME:-$5}
Type=Application
DESKTOPFILE
  desktop-file-install --dir=$HOME/.local/share/applications /tmp/"${_NAME:-$1}".desktop

  whiptail --title "New Desktop File for ${_NAME:-$1}" --textbox $HOME/.local/share/applications/"${_NAME:-$1}".desktop 16 60
  whiptail --title "Info" --yes-button "Ok" --no-button "Modify" --yesno "Is it OK, or do you want modify the desktop file!" 7 45 && exit
  if [[ $? != 0 ]]; then
    local _FIRST_CHECK=false
    _create_desktop
  fi
}

# VirtualBox - Helper function for cmd_install()...
#
_install_virtualbox() {
  if hash virtualbox 2>/dev/null; then
    _VER_CUR_VBOX="$(vboxmanage -v | cut -d 'r' -f1)"
    _VER_LAT_VBOX="$(wget -qO- https://download.virtualbox.org/virtualbox/LATEST.TXT)"
    _VER_LAT_VBOX_REPO="$(dpkg-query -W --showformat='${Version}' virtualbox* | cut -d- -f1)"
    if _check_version ${_VER_LAT_VBOX_REPO} ${_VER_CUR_VBOX}; then
      printf "A new version of the VirtualBox (%s) is available!\n" "${_VER_LAT_VBOX}"
      read -p "Do you want me to update? [y/n] " REPLY
    else
      printf "VirtualBox (%s) is installed and up-to-date.\n" "${_VER_CUR_VBOX}"
      if _check_version ${_VER_LAT_VBOX} ${_VER_LAT_VBOX_REPO}; then
        printf "$(tput setaf 3)...but a newer (%s) deb package is already available.$(tput sgr0)\n" "${_VER_LAT_VBOX}"
      fi
    fi
  else
    REPLY=y
  fi
  # Install VirtualBox
  if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
    if [ ! -f "/etc/apt/sources.list.d/virtualbox.list" ]; then
      sudo bash -c "cat > /etc/apt/sources.list.d/virtualbox.list" <<VBOXLIST
    deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian ${_VAR['Distro Ubuntu Codename']} contrib
VBOXLIST
      wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
      wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
      sudo apt-get update
    fi
    sudo apt -y install virtualbox-6.0
  fi
  # VirtualBox Extension Pack (syncing with current version of VirtualBox)
  if hash vboxmanage 2>/dev/null; then
    _VER_USED_VBOXREV="$(vboxmanage list extpacks | tr -s ' ' | grep Revision | awk '{ print $2 }')"
    _VER_CUR_VBOXREV="$(vboxmanage -v | cut -d 'r' -f2)"
    if [ "${_VER_USED_VBOXREV}" != "${_VER_CUR_VBOXREV}" ]; then
      _VBOB_LICENSE_KEY="56be48f923303c8cababb0bb4c478284b688ed23f16d775d729b89a2e8e5f9eb"
      if [ ! -f "/tmp/Oracle_VM_VirtualBox_Extension_Pack-${_VER_CUR_VBOX}.vbox-extpack" ]; then
        wget https://download.virtualbox.org/virtualbox/${_VER_CUR_VBOX}/Oracle_VM_VirtualBox_Extension_Pack-${_VER_CUR_VBOX}.vbox-extpack -O /tmp/Oracle_VM_VirtualBox_Extension_Pack-${_VER_CUR_VBOX}.vbox-extpack
      fi
      sudo VBoxManage extpack install /tmp/Oracle_VM_VirtualBox_Extension_Pack-${_VER_CUR_VBOX}.vbox-extpack --replace --accept-license=${_VBOB_LICENSE_KEY}
      sudo VBoxManage extpack cleanup
      printf "VirtualBox Extension Pack (...r%s) has been installed and updated!\n" "${_VER_CUR_VBOXREV}"
    fi
  fi
}

# Vagrant - Helper function for cmd_install()...
#
_install_vagrant() {
  _VER_LAT_VAGRANT="2.2.4"
  if hash vagrant 2>/dev/null; then
    _VER_LAT_VAGRANT=$(vagrant version | grep Latest | cut -d' ' -f3)
    _VER_CUR_VAGRANT=$(vagrant version | grep Installed | cut -d' ' -f3)
    if _check_version ${_VER_LAT_VAGRANT} ${_VER_CUR_VAGRANT}; then
      printf "A new version of the Vagrant (%s) is available!\n" "${_VER_LAT_VAGRANT}"
      read -p "Do you want me to update? [y/n] " REPLY
      _INSTALL=true
    else
      printf "Vagrant (%s) is installed and up-to-date.\n" "${_VER_CUR_VAGRANT}"
    fi
  else
    _INSTALL=true
  fi
  # Install Vagrant
  if "${_INSTALL:-false}"; then
    if [ ! -f "/tmp/vagrant_${_VER_LAT_VAGRANT}_x86_64.deb" ]; then
      wget https://releases.hashicorp.com/vagrant/${_VER_LAT_VAGRANT}/vagrant_${_VER_LAT_VAGRANT}_x86_64.deb -O /tmp/vagrant_${_VER_LAT_VAGRANT}_x86_64.deb
    fi
    sudo dpkg -i /tmp/vagrant_${_VER_LAT_VAGRANT}_x86_64.deb
    sudo apt install -fy
  fi
}

# Anki - Helper function for cmd_install()...
#
_install_anki() {
  if [[ $(_check_package_exists "anki") == 0 ]]; then
    _VER_ANKI="2.1.11"
    wget https://apps.ankiweb.net/downloads/current/anki-${_VER_ANKI}-linux-amd64.tar.bz2 -O /tmp/anki.tar.bz2
    tar -xj /tmp/anki.tar.bz2 -C /tmp
    cd /tmp/${_VER_ANKI}
    sudo make install
    cd ..
    # Change default `$HOME/.local/share/Anki2/` folder to custom directory
    sudo sed -i 's|^Exec=.*|Exec=sh -c "anki %f -b $HOME/Anki"|g' /usr/local/share/applications/anki.desktop
  fi
}

# Settings after installation
#
_setting_app() {
  if _contains "atom" "${_APP_SETTING[@]}"; then
    if [ ! -d "${HOME}/.atom/packages/atom-beautify/" ]; then
      sudo apt install -y python3-pip
      pip3 install beautysh
      apm install atom-beautify
    fi
  fi
  if _contains "libdvd" "${_APP_SETTING[@]}"; then
    sudo dpkg-reconfigure libdvd-pkg
  fi
  if _contains "tlp" "${_APP_SETTING[@]}"; then
    sudo apt install -y tpl-rdw
    sudo tlp start
  fi
  if _contains "digikam" "${_APP_SETTING[@]}"; then
    if [ ! -f "$HOME/.local/share/applications/digikam.desktop" ]; then
      _create_desktop digikam "Professional Photo Management with the Power of Open Source - A KDE Family Project" digikam digikam digikam_oxygen
    fi
    # digiKam icon
    mkdir -p $HOME/.local/share/icons/hicolor/scalable/apps/
    if [ ! -f "$HOME/.local/share/icons/hicolor/scalable/apps/digikam_oxygen.svg" ]; then
      wget https://www.digikam.org/img/digikam_oxygen.svg -O $HOME/.local/share/icons/hicolor/scalable/apps/digikam_oxygen.svg
    fi

    # Install mysql if not exists
    hash mysql 2>/dev/null || cmd_mysql

    # Add new MySQL user (digikam) with root priv. and create digikam database
    if [[ $(sudo mysql -u root -e "SHOW DATABASES;" | grep "digikam$" &>/dev/null; echo $?) != 0 ]]; then
      sudo mysql -u root <<EOF
CREATE USER IF NOT EXISTS 'digikam'@'localhost' IDENTIFIED BY '.digiKam2user';
GRANT ALL PRIVILEGES ON *.* TO 'digikam'@'localhost' WITH GRANT OPTION;
CREATE USER IF NOT EXISTS 'digikam'@'%' IDENTIFIED BY '.digiKam2user';
GRANT ALL PRIVILEGES ON *.* TO 'digikam'@'%' WITH GRANT OPTION;
CREATE DATABASE digikam;
GRANT ALL PRIVILEGES ON digikam.* TO 'digikam'@'localhost';
FLUSH PRIVILEGES;
EOF
    fi
    # Print setting instructions
    local _UNIX_SOCKET_PATH="$(sudo mysql -u root -e "SHOW VARIABLES LIKE 'socket';" | grep socket | awk '{ print $2 }')"
    printf "Improving the speed of Digikam using MySQL!\nGo to  ⇢  digiKam > Settings > Configure digikam > Database tab\n...and set the following\n"
    printf "  - Hostname:          localhost\n  - Conection options: UNIX_SOCKET=%s\n  - User:              digikam\n  - Password:          .digiKam2user\n  - Database:          klick 'Default Setting' button\n" "${_UNIX_SOCKET_PATH}"
  fi
}

# Installing software applications with different package formats and methods
#
# Usage:
#   cmd_install --app [packagename] --flat [LOCATION/REMOTE] --snap --pack
#
# Return:
#   Installed package with the given method(s).
#
_HELP[install]=$(cat << HELPINTSALL
The \`install\` command installs a package on the system.
Use --app to set the package name when installing.

  Usage:
    $(basename "${0}") install [options] [<arguments]

  Options:
    -a, --app          Name of package
    -p, --pack         Install software from main repository (apt-get)
    -r, --repo         Add repository to sources list
    -k, --key          Download and add key to package installation
    -d, --deb          Download the package as .deb and install using dpkg
    -s, --snap         Install software using Snap package management
    -f, --flat         Install software using Flatpak package management
        --ppa          Install packages from PPAs
        --appimg       Download AppImage
        --set          Settings after installation
        --fun          Install package with custom function
    -h, --help         Display this help
        --debug        Run debug mode
HELPINTSALL
)

cmd_install() {

  _PACK="" # (required) --app option argument
  _APP_SETTING=() # Settings into array variable
  # Command from whiptail menu
  if [ "${_CMD}" != "install" ]; then
    eval set -- "${@}"
  fi
  # Options parser
  _OPTS_INSTALL=$(getopt --options ha:pr:k:d:s::f: --long help,debug,app:,pack,repo:,key:,deb:,snap::,flat:,appimg:,ppa:,set:,fun: --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_INSTALL}"

  while true; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      -a|--app) _PACK=${2}
        shift 2 ;;
      -p|--pack)
        sudo apt install -y ${_PACK}
        if [[ "${?}" -ne 0 ]]; then
          _SCRIPT_MESSAGES+=("There is something wrong with the installation of \`${_PACK}\`.")
        fi
        shift ;;
      --d|--deb) _DEB_ARGS=${2}
        if [[ $(_check_package_exists "${_PACK}") != 0 ]]; then
          wget ${_DEB_ARGS} -O /tmp/${_PACK}.deb
          if [[ "${?}" -ne 0 ]]; then
            _SCRIPT_MESSAGES+=("There is something wrong with the downloading of \`${_DEB_ARGS}\`.")
          fi
          sudo dpkg -i /tmp/${_PACK}.deb
          sudo apt install -fy
        fi
        shift 2 ;;
      -r|--repo) _REPO_ARGS=${2}
        echo "${_REPO_ARGS}" | sudo tee /etc/apt/sources.list.d/${_PACK}.list
        shift 2 ;;
      -k|--key) _KEY_ARGS=${2}
        wget -q "${_KEY_ARGS}" -O- | sudo apt-key add -
        sudo apt update -qq
        sudo apt install -y ${_PACK}
        shift 2 ;;
      -s|--snap) _SNAP_ARGS=${2}
        if [[ $(_check_package_exists "snapd") != 0 ]]; then
          sudo apt install -y snapd
        fi
        sudo snap install ${_PACK} ${_SNAP_ARGS}
        if [[ "${?}" -ne 0 ]]; then
          _SCRIPT_MESSAGES+=("There is something wrong with the installation of \`${_PACK}\`.")
        fi
        shift 2 ;;
      -f|--flat) _FLAT_ARGS=${2}
        if [[ $(_check_package_exists "flatpak") != 0 ]]; then
          sudo apt install -y flatpak gnome-software-plugin-flatpak
          _SCRIPT_MESSAGES+=("After first installation of Flatpak is recommend\nrestart your system to complete setup.")
        fi
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install --assumeyes flathub ${_FLAT_ARGS}
        if [[ "${?}" -ne 0 ]]; then
          _SCRIPT_MESSAGES+=("There is something wrong with the installation of \`${_PACK}\`.")
        fi
        shift 2 ;;
      --appimg) _APPIMG_ARGS=${2}
        # AppImag location
        if [[ ! -d "${HOME}/.local/bin/" ]]; then
          mkdir -p ${HOME}/.local/bin/
        fi
        # Make location executable
        if [[ ":$PATH:" != *":${HOME}/.local/bin:"* ]]; then
          if [[ $(cat ~/.bashrc | grep "export PATH" &> /dev/null; echo $?) -eq 0 ]]; then
            sed -i "s|^export PATH=.*|export PATH=${PATH}:${HOME}/.local/bin|" ~/.bashrc
          else
            echo "export PATH=${PATH}:${HOME}/.local/bin" >> ~/.bashrc
          fi
          # Current session && Next ones
          export PATH=${PATH}:${HOME}/.local/bin && source ~/.bashrc && printf "Updated source...\n"
        fi
        # Get AppImage
        if [[ $(_check_package_exists "${_PACK}") != 0 ]]; then
          wget "${_APPIMG_ARGS}" -O ${HOME}/.local/bin/${_PACK}
          if [[ "${?}" -ne 0 ]]; then
            rm ${HOME}/.local/bin/"${1}"
            _SCRIPT_MESSAGES+=("There is something wrong with the downloading of \`${_DEB_ARGS}\`.")
          fi
          chmod a+x ${HOME}/.local/bin/${_PACK}
        fi
        shift 2 ;;
      --ppa) _PPA_ARGS=${2}
        shift 2 ;;
      --fun) _FUN_ARGS=${2}
        ${_FUN_ARGS}
        shift 2 ;;
      --set) _SET_ARGS=${2}
        _APP_SETTING+=( "${_SET_ARGS}" )
        shift 2 ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if [[ "${_OPTS_INSTALL}" == " --" ]]; then
    cmd_help "${_CMD}"
  fi

  # Run settings
  _setting_app
}

# COMMAND: Removing software applications
#
_HELP[remove]=$(cat << HELPREMOVE
The \`remove\` command removes the all format of a package from the system.

  Usage:
    $(basename "${0}") remove --app <packagename>

  Options:
    -a, --app <name>    Name of package
    -h, --help          Display this help
        --debug         Run debug mode
HELPREMOVE
)

cmd_remove() {

  _PACK="" # (required) --app option argument

  # Options parser
  _OPTS_UINSTALL=$(getopt --options ha: --long help,debug,app: --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_UINSTALL}"

  while true ; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      -a|--app) _PACK=${2} ; shift 2 ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if [[ -z "${_PACK}" ]]; then
    _error "missing required option -- 'app'"
  else
    if [[ $(_check_package_exists "${_PACK}") == 0 ]]; then
      if [[ "$(_check_package_exists --print-status "${_PACK}")" == *"pack"* ]]; then
        sudo apt-get remove -y "${_PACK}"
      fi
      if [[ "$(_check_package_exists --print-status "${_PACK}")" == *"snap"* ]]; then
        sudo snap remove "${_PACK}"
      fi
      if [[ "$(_check_package_exists --print-status "${_PACK}")" == *"flat"* ]]; then
        _FLATPAK_PACK=$(flatpak list --app --columns=application | grep "${_PACK}")
        sudo flatpak uninstall -y "${_FLATPAK_PACK}"
      fi
      if [[ "$(_check_package_exists --print-status "${_PACK}")" == *"complied"* ]]; then
        _SCRIPT_MESSAGES+=("☹ Sorry, '${_PACK}' package can remove manually only.")
      fi
    fi
  fi
}

# COMMAND: Vagrant
#
_HELP[vagrant]=$(cat << HELPVAGRANTFILE
The \`vagrant\` command creates a Vagrantfile in the <PATH> directory.

  Usage:
    $(basename "${0}") vagrant --path <path> [options]

  Options:
    -i, --ip <ipadress> IP adress for private network [default: 192.168.33.10]
    -p, --path <path>   Place the \`Vagrantfile\` (required)
    -h, --help          Display this help
        --debug         Run debug mode
HELPVAGRANTFILE
)

cmd_vagrant() {

  ! _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1

  local _PATH=""
  local _IP="192.168.33.10"

  # Options parser
  _OPTS_VAGRANT=$(getopt --options hp:i --long help,debug,path:,ip --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_VAGRANT}"

  while true ; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      -p|--path) _VAGRANT=true ; _PATH=${2} ; shift 2 ;;
      -i|--ip) _IP="${2}" ; shift 2 ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if ! "${_VAGRANT:-false}"; then
    _error "missing required option -- 'path'"
  else
    [ ! -d "${_PATH}" ] && _error  "No such directory - '${_PATH}'"
    if [ ! -f "${_PATH}/Vagrantfile" ]; then
      # Create a Vagrantfile to the $PATH directory
      cat > ${_PATH}/Vagrantfile <<VRAGANTFILE
# -*- mode: ruby -*-
# vi: set ft=ruby :
# Overwrite host locale in vagrant ssh session
ENV["LC_ALL"] = "en_US.UTF-8"
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"
  config.vm.network "private_network", ip: "${_IP}"
  config.vm.hostname = "VPS"
  config.vm.synced_folder "www/", "/var/www", create: true, owner: "www-data", group: "www-data"
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "4096"
    vb.name = "VPS-$RANDOM"
    # Do not use NAT mode instead to use the PCnet or Paravirtualized network
    vb.default_nic_type = "Am79C973"
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    # Disable the cloudimg-console.log
    # vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
  end
end
VRAGANTFILE

      printf "A \`Vagrantfile\` has been placed in '%s' directory.\nYou are now ready to \`vagrant up\` your first virtual environment!\n  ⇢  Private network IP: $(tput setaf 3)%s$(tput sgr0)\n" "${_PATH}" "${_IP}"
    else
      printf "A Vagrantfile already exists in '%s'.\n" "${_PATH}"
    fi
  fi
}

# COMMAND: Nginx
#
_check_desktop && _NGINX_NOTE="  Note:\n    It's not recommended to run on desktop environment,\n    that's why this command is not allowed default.\n"

_HELP[nginx]=$(cat << HELPNGINX
The \`nginx\` command  builds the mainline version of Nginx from source.

${_NGINX_NOTE}
  Usage:
    $(basename "${0}") nginx [options] [<arguments>...]

  Options:
    -i, --install       Install and rebuid Nginx for updating
    -c, --config        Update all the config files and reload server
    -b, --block         Add or update a server block
                        argument <domainname>
        --type=<args>   Set type for server block
                        block types: <basic>|<php>|<fastcgi>|<odoo>|<nodejs>
                        [default: basic]
        --sub           Set subdomain alias
                        argument <sugdomainalias>
        --php-admin     Enable PhpMyAmin for the server block [default: disable]
                        (only works if type is php/fastcgi)
    -r, --root          Set server root path
                        [default: '/var/www/<domainname>/public']
    -s, --ssl           Enable https server [default: disable]
                        all server certificate is located in this folder:
                        '/etc/letsencrypt/live/'
    -d, --disable       Disable server block
                        argument: <domainname>
    -h, --help          Display this help
        --debug         Run debug mode
        --force         Enable running on desktop
HELPNGINX
)

# Note:
#   * Clear https in Chrome: chrome://net-internals/#hsts
#   * Import certificate:    chrome://settings/certificates

cmd_nginx() {

  # Options parser
  local _DOMAIN=""
  local _SUB=""
  local _DISABLE_SITE=""
  _OPTS_NGINX=$(getopt --options hficb:r:s,d: --long help,debug,install,config,block:,root:,ssl,type::,php-admin,sub:,disable:,force --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_NGINX}"

  while true ; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD} ; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      -i|--install) _INSTALL=true ; shift ;;
      -c|--config) _CONFIG=true ; shift ;;
      -b|--block) _DOMAIN="${2}" ; shift 2 ;;
      -r|--root) _CUSTOM_ROOT=true ; _ROOT_PATH="${2}" ; shift 2 ;;
      --sub) _SUB="${2}" ; shift 2 ;;
      --type)
        case "${2}" in
          "basic"|"php"|"fastcgi"|"odoo"|"nodejs") _BLOCK_TYPE=${2} ; shift 2 ;;
          *) _error "unsupported type of server block -- '${2}'" ; shift ;;
        esac ;;
      --php-admin) _PHP_ADMIN=true ; shift ;;
      -s|--ssl) _SSL=true ; shift ;;
      -d|--disable) _DISABLE_SITE="${2}" ; shift 2 ;;
      --force) _FORCE=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if ! "${_FORCE:-false}"; then
    _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1
  fi

  # local _VER_LAT_NGINX="$(echo $(curl -s http://nginx.org/en/CHANGES) | grep -m1 'Changes with nginx' | cut -d' ' -f4)"
  local _VER_LAT_NGINX="$(wget -qO- http://nginx.org/en/download.html | egrep -o 'nginx-[0-9\.]+.tar.gz' | sort -V | tail -1 | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')"
  local _VER_PCRE="8.43"
  local _VER_ZLIB="1.2.11"
  # local _VER_LAT_OPENSSL="$(wget -qO- --no-check-certificate https://www.openssl.org/source/ | egrep -o 'openssl-[A-Za-z0-9\.]+.tar.gz' | sort -V | tail -1 | sed -nre 's|^[^0-9]*(([0-9]+\.)*[A-Za-z0-9]+).*|\1|p')"
  local _VER_OPENSSL="1.1.1b"
  local _VER_GEOIP2="3.2"
  local _USER_WEB="www-data"

  if hash nginx 2>/dev/null; then
    _VER_CUR_NGINX="$(echo $(nginx -v 2>&1) | cut -d/ -f 2)"
    # Check version
    if _check_version $_VER_LAT_NGINX $_VER_CUR_NGINX; then
      printf "A newer version (%s) is available than the current version (%s)!\n" "${_VER_LAT_NGINX}" "${_VER_CUR_NGINX}"
      read -p "Do you want me to update? [y/n] " REPLY
    else
      printf "  ✔  Nginx (%s) is up to date!\n" "${_VER_CUR_NGINX}"
      if "${_INSTALL:-false}"; then
        read -p "Do you want me to rebuild? [y/n] " REPLY
      fi
    fi
  else
    read -p "Do you want to install the Nginx server? [y/n] " REPLY
    [[ "${REPLY:-}" =~ ^[Nn]$ ]] && exit 0
  fi

  ##
  # Installing Nginx
  ##
  if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then

    _VER_NGINX=${_VER_LAT_NGINX}

    # Make a backup
    if [ -d "/etc/nginx" ]; then
      _BACKUP_TIME="$(LC_ALL=C date +%Y%m%d_%H%M%S)"
      sudo mv /etc/nginx /etc/nginx_backup_${_BACKUP_TIME}
    fi

    # Downloading Nginx and its dependencies
    if [ ! -d "/tmp/nginx-${_VER_NGINX}" ]; then
      wget -qO- https://nginx.org/download/nginx-${_VER_NGINX}.tar.gz -O /tmp/nginx-${_VER_NGINX}.tar.gz
      tar -xvzf /tmp/nginx-${_VER_NGINX}.tar.gz -C /tmp
    fi
    if [ ! -d "/tmp/openssl-${_VER_OPENSSL}" ]; then
      wget -qO- https://www.openssl.org/source/openssl-${_VER_OPENSSL}.tar.gz -O /tmp/openssl-${_VER_OPENSSL}.tar.gz
      tar -xvzf /tmp/openssl-${_VER_OPENSSL}.tar.gz -C /tmp
    fi
    if [ ! -d "/tmp/pcre-${_VER_PCRE}" ]; then
      wget -qO- https://ftp.pcre.org/pub/pcre/pcre-${_VER_PCRE}.tar.gz -O /tmp/pcre-${_VER_PCRE}.tar.gz
      tar -xvzf /tmp/pcre-${_VER_PCRE}.tar.gz -C /tmp
    fi
    if [ ! -d "/tmp/zlib-${_VER_ZLIB}" ]; then
      wget -qO- https://zlib.net/zlib-${_VER_ZLIB}.tar.gz -O /tmp/zlib-${_VER_ZLIB}.tar.gz
      tar -xvzf /tmp/zlib-${_VER_ZLIB}.tar.gz -C /tmp
    fi
    if [ ! -d "/tmp/ngx_http_geoip2_module-${_VER_GEOIP2}" ]; then
      wget -qO- https://github.com/leev/ngx_http_geoip2_module/archive/${_VER_GEOIP2}.tar.gz -O /tmp/${_VER_GEOIP2}.tar.gz
      tar -xvzf /tmp/${_VER_GEOIP2}.tar.gz -C /tmp
    fi

    # Add nginx user group if they do not already exist
    sudo id -g nginx &>/dev/null || sudo addgroup --system nginx
    sudo id -u nginx &>/dev/null || ( sudo adduser --disabled-password --system --home /var/cache/nginx --shell /sbin/nologin --group nginx || _error "adding new nginx user and group" )

    # Nginx's some directory is not created by default
    sudo mkdir -p /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp}
    sudo chown -R nginx:root /var/cache/nginx/
    sudo chmod -R 700 /var/cache/nginx/

    # Download GeoIP2 database
    if [[ $(dpkg-query -W --showformat='${Status}\n' libmaxminddb-dev 2>/dev/null | grep "install ok installed" &> /dev/null; echo $?) != 0 ]]; then
      sudo add-apt-repository ppa:maxmind/ppa -y
      sudo apt update -qq
      sudo apt install -y  libmaxminddb-dev
    fi

    # Install required softwares
    sudo apt install -y build-essential libssl-dev geoipupdate

    # Update or install GeoIP2 database
    if hash geoipupdate 2>/dev/null; then
      if [ ! -f "/usr/share/GeoIP/.geoipupdate.lock" ]; then
        (sudo geoipupdate -d /usr/share/GeoIP/) &
        _spinner $! "Updating GeoIP database \`/usr/share/GeoIP\`.\nThis is going to take a few minutes."
      fi
    fi

    # Install MailCatcher and dependencies
    if [ -d "/home/vagrant" ]; then
      if ! hash mailcatcher 2>/dev/null; then
        sudo apt -y install libsqlite3-dev ruby-dev
        sudo gem install mailcatcher --no-ri --no-rdoc
        # Starting
        /usr/bin/env $(which mailcatcher) --ip=0.0.0.0
        # Starting on boot
        sudo bash -c 'echo "@reboot root $(which mailcatcher) --ip=0.0.0.0" >> /etc/crontab'
        sudo update-rc.d cron defaults
      fi
      # Allow UFW for MailCatcher
      sudo ufw allow 1080 comment 'MailCatcher' &>/dev/null  && printf "  ⇢  Ufw rule: allow MailCatcher\n"
    fi

    # You can verify compiler support for __uint128_t with the following
    # https://wiki.openssl.org/index.php/Compilation_and_Installation
    if gcc -dM -E - </dev/null | grep __SIZEOF_INT128__  ; 	then _ENABLE_EC="enable-ec_nistp_64_gcc_128"; else _ENABLE_EC=""; fi

    cd /tmp/nginx-${_VER_NGINX}
    ./configure \
      --prefix=/etc/nginx \
      --with-pcre=../pcre-${_VER_PCRE} \
      --with-zlib=../zlib-${_VER_ZLIB} \
      --with-openssl=../openssl-${_VER_OPENSSL} \
      --add-dynamic-module=../ngx_http_geoip2_module-${_VER_GEOIP2} \
      --with-openssl-opt="no-weak-ssl-ciphers no-ssl3 enable-tls1_3 no-shared ${_ENABLE_EC} -DOPENSSL_NO_HEARTBEATS -fstack-protector-strong" \
      --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' \
      --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC' \
      --sbin-path=/usr/sbin/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --pid-path=/var/run/nginx.pid \
      --lock-path=/var/run/nginx.lock \
      --modules-path=/usr/lib/nginx/modules \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --http-client-body-temp-path=/var/cache/nginx/client_temp \
      --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
      --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
      --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
      --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
      --with-http_ssl_module \
      --user=nginx \
      --group=nginx \
      --with-file-aio \
      --with-pcre-jit \
      --with-stream \
      --with-stream_ssl_module \
      --with-threads \
      --with-http_auth_request_module \
      --with-http_gunzip_module \
      --with-http_gzip_static_module \
      --with-http_mp4_module \
      --with-http_flv_module \
      --with-http_realip_module \
      --with-http_secure_link_module \
      --with-http_slice_module \
      --with-http_ssl_module \
      --with-http_v2_module \
      --with-http_stub_status_module \
      --with-http_sub_module \
      --without-http_empty_gif_module \
      --without-http_split_clients_module \
      --without-http_ssi_module \
      --without-mail_imap_module \
      --without-mail_pop3_module \
      --without-mail_smtp_module

    (sudo make --no-print-directory >/dev/null 2>/dev/null) &
    _spinner $! "Make Nginx..."
    sudo make install > /dev/null
    sudo make clean > /dev/null

    sudo ln -s /usr/lib/nginx/modules /etc/nginx/

    # Allow UFW for Nginx
    sudo bash -c "cat > /etc/ufw/applications.d/nginx" <<NGINXUFW
[Nginx HTTP]
title=Web Server (Nginx, HTTP)
description=Small, but very powerful and efficient web server
ports=80/tcp

[Nginx HTTPS]
title=Web Server (Nginx, HTTPS)
description=Small, but very powerful and efficient web server
ports=443/tcp

[Nginx Full]
title=Web Server (Nginx, HTTP + HTTPS)
description=Small, but very powerful and efficient web server
ports=80,443/tcp
NGINXUFW
    sudo ufw allow 'Nginx Full' comment 'Web Server (HTTP + HTTPS)' &>/dev/null  && printf "  ⇢  Ufw rule: allow Nginx Full\n"

    # Restoring all server config files
    if [ -d "/etc/nginx_backup_${_BACKUP_TIME:-}" ]; then
      sudo cp /etc/nginx_backup_${_BACKUP_TIME:-}/conf.d/* /etc/nginx/conf.d/
    fi

    printf "  ✔  Nginx is downloaded and installed.\n"
    # Continue configurations...
    _CONFIG=true
  fi # ...end of Nginx server's downloading, updating or installing

  ##
  # Configure Nginx
  ##
  if "${_CONFIG:-false}"; then

    # Manage server directories
    sudo mkdir -p \
      /etc/{nginx/conf.d,nginx/snippets,letsencrypt} \
      /var/www/default_server/{public,cache,letsencrypt}
    if [ -d "/etc/nginx/html" ]; then sudo rm -rf /etc/nginx/html; fi

    # Set ownership and permissions
    sudo chown -R ${_USER_WEB}:${_USER_WEB} /var/www
    sudo chown -R root:root /var/log/nginx

    # Nginx default config file
    sudo bash -c "cat > /etc/nginx/nginx.conf" <<NGINXCONFIG
##
# Modules
##
load_module modules/ngx_http_geoip2_module.so;

##
# Nginx Configurations
##
user ${_USER_WEB};
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    ##
    # Index directive one time
    ##
    index index.php index.htm index.html;

    ##
    # GeoIP Database
    ##
    geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb {
        \$geoip2_data_country_code country iso_code;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Log format (.csv compatible)
    ##
    log_format main '--- "\$time_iso8601"; "\$remote_addr"; "\$status"; '
    '"\$request"; "\$http_user_agent"; "\$http_referer"; '
    '"\$http_x_forwarded_for"; "\$remote_user"; "\$body_bytes_sent"; '
    '"\$ssl_protocol"; "\$ssl_cipher"; ';
    access_log /var/log/nginx/access.log  main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 100M;
    client_body_buffer_size 1m;

    ##
    # Secure config
    ##
    server_tokens off;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self' https://*; connect-src 'self' https://* wss://*; font-src 'self' https://* blob: data:; frame-src 'self' https://* blob: data:; img-src 'self' https://* blob: data:; media-src 'self' https://* blob: data:; object-src 'self' https://* blob: data:; script-src 'self' https://* 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://* 'unsafe-inline';";
    add_header "X-UA-Compatible" "IE=Edge";

    ##
    # Cache-Control - Expiration
    ##
    map \$sent_http_content_type \$expires {
        default                    off;
        text/html                  epoch;
        text/css                   14d;
        application/javascript     max;
        ~image/                    max;
        ~video/                    max;
        ~audio/                    max;
    }

    ##
    # FastCGI cache config
    ##
    fastcgi_cache_key "\$scheme\$request_method\$host\$request_uri";
    fastcgi_cache_use_stale error timeout invalid_header http_500;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    ##
    # Odoo server
    ##
    upstream odoo {
        server 127.0.0.1:8069;
    }
    upstream odoochat {
        server 127.0.0.1:8072;
    }

    ##
    # NodeJS server
    ##
    include /etc/nginx/snippets/upstream_node_*.conf;

    ##
    # Including serever block configurations
    ##
    include /etc/nginx/conf.d/*.conf;
}
NGINXCONFIG

    # Nginx proxy config
    sudo bash -c "cat > /etc/nginx/snippets/proxy.conf" <<NGINXPROXY
##
# Proxy Settings
##
proxy_set_header X-Forwarded-Host \$host;
proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header Early-Data \$ssl_early_data;
proxy_connect_timeout 720s;
proxy_send_timeout 720s;
proxy_read_timeout 720s;
NGINXPROXY

    # Nginx (global) restrictions config
    sudo bash -c "cat > /etc/nginx/snippets/restrictions.conf" <<NGINXRESTRICTION
location ~ /\. {
    deny all;
}

location = /favicon.ico {
  	log_not_found off;
  	access_log off;
}

location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
}

# WordPress specific config
location = /wp-config.php { deny all; }
location = /wp-config-sample.php { return 404; }
location = /readme.html { deny all; }
# location = /xmlrpc.php { return 404; }
location ~* /(license.txt|nginx.conf) { deny all; }
location ~* /(?:uploads|files)/.*\.php\$ { deny all; }
location ~* ^/(wp-content)/(.*?)\.(zip|gz|tar|bzip2|7z)\$ { deny all; }
# WordPress EDD plugin
rewrite ^/wp-content/uploads/edd/(.*)\.zip\$ / permanent;
rewrite ^/media/edd/(.*)\.zip\$ / permanent;

# PhpMyadmin - Block attempts to access phpMyAdmin (If you actually use it, don't include this rule!)
# location ~* .([pP]hp[mM]y[aA]dmin) { return 404; }

# Disallow cgi scripts
# location ~* \.(pl|cgi|py|sh|lua)\$ { return 444; }
# Make sure files with the following extensions do not get loaded by nginx because nginx would display the source code...
# location ~* \.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)\$|^(\..*|Entries.*|Repository|Root|Tag|Template)\$|\.php_ { return 444; }

# Maintenance - Allow full access to certain IP
# if (\$remote_addr != "192.168.33.1") { return 503; }
NGINXRESTRICTION

    # Nginx ssl config
    _SSL_CIPHERS_TLS1_2="$(openssl ciphers -tls1_2 -s):"
    _VER_CUR_OPENSSL="$(openssl version 2>&1)"; _VER_CUR_OPENSSL="${_VER_CUR_OPENSSL:8:6}"
    if _check_version "${_VER_CUR_OPENSSL}" "1.1.1"; then
      _SSL_CIPHERS_TLS1_3="$(openssl ciphers -tls1_3 -s):"
    else
      _SSL_CIPHERS_TLS1_3="TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:"
    fi
    sudo bash -c  "cat > /etc/nginx/snippets/ssl.conf" <<NGINXSSL
ssl_protocols TLSv1.3 TLSv1.2;
ssl_ciphers '${_SSL_CIPHERS_TLS1_3}${_SSL_CIPHERS_TLS1_2}';
ssl_prefer_server_ciphers on;
ssl_ecdh_curve secp384r1;
ssl_early_data on; # Requires nginx >= 1.16.0 - http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_early_data
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_session_tickets off; # Requires nginx >= 1.5.9
ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
NGINXSSL

    # Nginx ssl-stapling config
    sudo bash -c  "cat > /etc/nginx/snippets/ssl-stapling.conf" <<NGINXSSL
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=60s;
resolver_timeout 30s;
NGINXSSL

    # Nginx phpmyadmin config
    sudo bash -c "cat > /etc/nginx/snippets/phpmyadmin.conf" <<NGINXPHPADMIN
location /phpmyadmin {

    root /usr/share/;
    location ~ ^/phpmyadmin/(doc|sql|setup|libraries|templates)/ {
        return 404;
    }

    location ~ ^/phpmyadmin/(.+\.php)\$ {
        try_files \$uri =404;
        fastcgi_index index.php;
        fastcgi_pass unix:/run/php/php${_VER_PHP:-7.2}-fpm.sock;
        include /etc/nginx/fastcgi.conf;
    }

    location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))\$ {
        root /usr/share/;
    }

}
NGINXPHPADMIN

    # Logrotate configuration
    sudo bash -c "cat > /etc/logrotate.d/nginx" <<-NGINXLOGROTATE
/var/log/nginx/*.log {
    su root syslog
    create 0640 www-data adm
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    sharedscripts
    postrotate
        if [ -f /var/run/nginx.pid ]; then
                kill -USR1 \`cat /var/run/nginx.pid\`
        fi
    endscript
}

# Turn to force the update
# sudo logrotate -f -v /etc/logrotate.d/nginx
NGINXLOGROTATE

    # Enable logrotate compression
    sudo sed -i "s/#compress/compress/g" /etc/logrotate.conf
    # Turn to force the update
    sudo logrotate -f -v /etc/logrotate.d/nginx &> /dev/null

    # Add Block: Default server block
    #
    if [ -d "/home/vagrant" ]; then _return="# "; else _return=""; fi

    if "${_SSL:-false}"; then
      sudo bash -c "cat > /etc/nginx/conf.d/default.conf" <<HTTPSDEFAULTBLOCK
server {
    listen 80 default_server;
    server_name _;
    root /var/www/default_server/public;

    ##
    # Let's Encrypt Settings
    ##
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/default_server/letsencrypt;
        allow all;
    }

    ##
    # Log
    ##
    access_log /var/log/nginx/default-access.log main;
    error_log /var/log/nginx/default-error.log;

    include /etc/nginx/snippets/restrictions.conf;

    ${_return}return 444;
}

server {
    listen 443 ssl http2 default_server;
    server_name _;
    root /var/www/default_server/public;

    ##
    # Let's Encrypt Settings
    ##
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/default_server/letsencrypt;
        allow all;
    }

    ##
    # SSL
    ##
    include /etc/nginx/snippets/ssl.conf;
    ssl_certificate /etc/letsencrypt/live/${_VAR[Hostname]}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${_VAR[Hostname]}/privkey.pem;

    ##
    # SSL Stapling
    ##
    ${_SSL_STAPLING:-}

    ##
    # Log
    ##
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    ##
    # Restrictions
    ##
    include /etc/nginx/snippets/restrictions.conf;

    ${_return}return 444;
}
HTTPSDEFAULTBLOCK
    else
      sudo bash -c "cat > /etc/nginx/conf.d/default.conf" <<HTTPDEFAULTBLOCK
server {
    listen 80 default_server;
    server_name _;
    root /var/www/default_server/public;

    location ^~ /.well-known/acme-challenge/ {
        allow all;
        default_type "text/plain";
        root /var/www/_letsencrypt;
    }

    ##
    # Log
    ##
    access_log /var/log/nginx/default-access.log main;
    error_log /var/log/nginx/default-error.log;

    ##
    # Restrictions
    ##
    include /etc/nginx/snippets/restrictions.conf;

    ${_return}return 444;
}
HTTPDEFAULTBLOCK
    fi

    # Index file
    sudo bash -c "cat > /var/www/default_server/public/index.html" <<INDEXHTML
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Server</title>
  <meta name="description" content="Server">
  <style>.center{text-align: center!important;}</style>
  </head>
  <body>
    <p class="center">${_VAR[IP]}</p>
  </body>
</html>
INDEXHTML

    # Add blank favicon.ico
    if [ ! -f "/var/www/default_server/public/favicon.ico" ]; then
      sudo touch /var/www/default_server/public/favicon.ico
    fi

    # Nginx init script
    if [ -f "/lib/systemd/system/nginx.service" ]; then
      _RELOAD_DEAMON=true
    fi
    sudo bash -c "cat > /lib/systemd/system/nginx.service" <<NGINXSERVICE
[Unit]
Description=Nginx - HTTP and reverse proxy server
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/var/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/bin/kill -s HUP \$MAINPID
ExecStop=/bin/kill -s TERM \$MAINPID

[Install]
WantedBy=multi-user.target

NGINXSERVICE

    # Reload deamon because of the modify (update)
    if "${_RELOAD_DEAMON:-false}"; then
      sudo systemctl daemon-reload > /dev/null
    fi

    # Nginx service
    if [[ $(systemctl status nginx.service | grep Active: | cut -d ' ' -f 5) != "active" ]]; then
      # Enable Nginx to start on boot and start Nginx immediately
      sudo systemctl enable nginx.service || _error "install and enable Nginx -- 'sysremctl'"
      sudo systemctl start nginx.service || _error "install and starting Nginx -- 'sysremctl'"
      # sudo ln -sf /lib/systemd/system/nginx.service /etc/systemd/system/multi-user.target.wants/
      printf "  ✔  Starting Nginx is OK\n"
      [ -d /home/vagrant ] && printf "  ⇢  Default server: $(tput setaf 4)http://%s$(tput sgr0)\n" "${_VAR[IP]}"
    else
      # Check if Nginx will automatically initiate after a reboot:
      if [[ $(systemctl is-enabled nginx.service) != "enabled" ]]; then
        sudo systemctl enable nginx.service || _error "configure and enable Nginx -- 'sysremctl'"
      fi
      sudo nginx -s reload || _error "configure and reloading Nginx"
      printf "  ✔  Nginx Reloading is OK\n"
      [ -d /home/vagrant ] && printf "  ⇢  Default server: $(tput setaf 4)http://%s$(tput sgr0)\n" "${_VAR[IP]}"
    fi
  fi # ..end of server configure

  ##
  # Creating a server block
  ###
  if [[ -n "${_DOMAIN:-}" ]]; then

    # If subdomain
    if [[ -n "${_SUB}" ]]; then
      _SUB="${_SUB}."
    fi

    # Set server paths
    if "${_CUSTOM_ROOT:-false}"; then
      _ROOT_PATH=/var/www${_ROOT_PATH}
    else
      _ROOT_PATH=/var/www/${_SUB}${_DOMAIN}/public
    fi
    _CACHE_PATH=/var/www/${_SUB}${_DOMAIN}/cache
    _LETSENCRYPT_PATH=/var/www/${_SUB}${_DOMAIN}/letsencrypt

    # Only in case of testing on localhost
    if [[ "${_DOMAIN}" == "${_VAR[Hostname]}" ]]; then
      _ROOT_PATH=/var/www/default_server/public
      _CACHE_PATH=/var/www/default_server/cache
      _LETSENCRYPT_PATH=/var/www/default_server/letsencrypt
      _ssl_certificate
      $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "$0") nginx --config --ssl
      exit
    fi

    # Confirmation
    printf "\nCreating or updating a Nginx server block for %s\n\n" "${_SUB}${_DOMAIN}"
    printf "  - domain:              %s\n" "${_SUB}${_DOMAIN}"
    printf "  - type:                %s\n" "${_BLOCK_TYPE:-basic}"
    if [[ "${_BLOCK_TYPE:-basic}" == "nodejs" ]]; then
      if [ -f "/etc/nginx/snippets/upstream_node_${_SUB}${_DOMAIN}.conf" ]; then
        _PORT=$(cat /etc/nginx/snippets/upstream_node_${_SUB}${_DOMAIN}.conf | grep server | cut -d: -f2 | cut -d';' -f1)
      else
        # Generate new port
        _PORT=$(cat /etc/nginx/snippets/upstream_node* 2>/dev/null | sort -r | grep -m1 server | cut -d: -f2 | cut -d';' -f1)
        if [[ -z "${_PORT}" ]]; then
          _PORT=3000
        fi
        let _PORT+=1
        _RELOAD_PM2=true
      fi
      printf "  - port:                %s\n" "${_PORT}"
    fi
    printf "  - root path:           %s\n" "${_ROOT_PATH}"
    printf "  - ssl:                 %s\n" "${_SSL:-false}"
    if "${_SSL:-false}"; then
      printf "  - certificate path:    /etc/letsencrypt/live/%s\n" "${_DOMAIN}"
      if [ ! -d "/home/vagrant" ]; then
        printf "  - certbot path:        %s/.well-known/acme-challenge\n" "${_LETSENCRYPT_PATH}"
      fi
    fi
    printf "  - cache path*:         %s\n\n" "${_CACHE_PATH}"
    printf "$(tput sitm)$(tput setaf 244)  * cache path is used only if the block type is 'fastcgi'$(tput sgr0)\n\n"
    read -p "Are you sure? [y/n] " REPLY

    if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then

      # Create quickly an application skeleton if not exists
      if [[ "${_BLOCK_TYPE:-basic}" == "nodejs" ]]; then
        if [ ! -f "/var/www/${_SUB}${_DOMAIN}/bin/www" ]; then
          cd /var/www
          cmd_nodejs -a ${_SUB}${_DOMAIN}
        fi
      fi

      # Set FQDN
      _FQDN="${_VAR[IP]} ${_VAR[Hostname]}.${_DOMAIN} ${_VAR[Hostname]}"
      grep "${_FQDN}" /etc/hosts &>/dev/null || printf "%s\n" "${_FQDN}" | sudo tee -a /etc/hosts > /dev/null

      # Create server path
      sudo mkdir -p {${_ROOT_PATH},${_CACHE_PATH},${_LETSENCRYPT_PATH}}

      # Add index file
      if [[ "${_BLOCK_TYPE:-basic}" != "nodejs" ]]; then
        if [ ! -f "${_ROOT_PATH}/index.html" ]; then
          sudo bash -c "cat > "${_ROOT_PATH}"/index.html" <<INDEXHTML
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Welcome to ${_SUB}${_DOMAIN}</title>
        <meta name="description" content="Welcome to ${_SUB}${_DOMAIN}">
        <style>.center{text-align: center!important;}</style>
    </head>
    <body>
        <p class="center">Welcome to ${_SUB}${_DOMAIN}</p>
    </body>
</html>
INDEXHTML
        fi
      else
        # Remove index.html if exists
        if [ -f "${_ROOT_PATH}/index.html" ]; then
          sudo rm ${_ROOT_PATH}/index.html
        fi
        if [[ $(grep "title: 'Express'" /var/www/${_SUB}${_DOMAIN}/routes/index.js &>/dev/null; echo $?) == 0 ]]; then
          sudo sed -i "s/title: 'Express'/title: '${_SUB}${_DOMAIN}'/g" /var/www/${_SUB}${_DOMAIN}/routes/index.js
          _RELOAD_PM2=true
        fi
      fi

      # Add blank favicon.ico
      if [ ! -f "${_ROOT_PATH}/favicon.ico" ]; then
        sudo touch ${_ROOT_PATH}/favicon.ico
      fi

      ##
      # START SERVER BLOCK [default: redirect www to non-www]
      ##
      sudo bash -c "cat > /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<HTTPSERVERBLOCK
server {
    listen 80;
    server_name www.${_SUB}${_DOMAIN};
    return 301 http://${_SUB}${_DOMAIN}\$request_uri;
}

server {
    listen 80;
    listen [::]:80;
    server_name ${_SUB}${_DOMAIN};
    root ${_ROOT_PATH};

    ##
    # Let's Encrypt
    ##
    location ^~ /.well-known/acme-challenge/ {
        allow all;
        default_type "text/plain";
        root ${_LETSENCRYPT_PATH};
    }

    ##
    # GZIP
    ##
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/javascript image/*;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

HTTPSERVERBLOCK

      if "${_SSL:-false}"; then

        # Add Block: Restrictions ...and close a valid config file befor create certificate
        #
        sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<RESTRICTIONSBLOCK
    include /etc/nginx/snippets/restrictions.conf;
}
RESTRICTIONSBLOCK

        # Reloading
        sudo nginx -s reload || _error "reloading Nginx -- 'befor creating SSL certificates'"

        # Create a certificate
        _ssl_certificate

        # "Re-open" the block: Create new block for https
        #
        sudo bash -c "cat > /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<HTTPSSERVERBLOCK
server {
    listen 80;
    server_name ${_SUB}${_DOMAIN} www.${_SUB}${_DOMAIN};

    ##
    # Let's Encrypt Settings
    ##
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root ${_LETSENCRYPT_PATH};
        allow all;
    }

    location / {
        return 301 https://${_SUB}${_DOMAIN}\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name www.${_SUB}${_DOMAIN};

    ##
    # SSL
    #
    include /etc/nginx/snippets/ssl.conf;
    ssl_certificate /etc/letsencrypt/live/${_DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${_DOMAIN}/privkey.pem;

    ##
    # Redirecting
    ##
    return 301 https://${_SUB}${_DOMAIN}\$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${_SUB}${_DOMAIN};
    root ${_ROOT_PATH};

    ##
    # Let's Encrypt Settings
    ##
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root ${_LETSENCRYPT_PATH};
        allow all;
    }

    ##
    # SSL
    ##
    include /etc/nginx/snippets/ssl.conf;
    ssl_certificate /etc/letsencrypt/live/${_DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${_DOMAIN}/privkey.pem;

    ##
    # SSL Stapling
    ##
    ${_SSL_STAPLING:-}

    ##
    # GZIP
    ##
    gzip off;

HTTPSSERVERBLOCK
      fi # ...end if $_SSL true

      # Add Block: Log and cache config
      #
      sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<LOGBLOCK
    ##
    # Log
    ##
    access_log /var/log/nginx/${_SUB}${_DOMAIN}-access.log main;
    error_log /var/log/nginx/${_SUB}${_DOMAIN}-error.log;

    ##
    # Cache
    ##
    expires \$expires;

LOGBLOCK

      # Add Block: Odoo
      #
      if [[ "${_BLOCK_TYPE:-basic}" == "odoo" ]]; then
        sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<ODOOBLOCK
    ##
    # Odoo
    ##

    ##
    # Redirect longpoll requests to odoo longpolling port
    ##
    location /longpolling {
        proxy_pass http://odoochat;
    }

    ##
    # Redirect requests to odoo backend server
    ##
    location / {
      proxy_redirect off;
      proxy_pass http://odoo;
      include /etc/nginx/snippets/proxy.conf;
    }

ODOOBLOCK

      elif [[ "${_BLOCK_TYPE:-basic}" == "nodejs" ]]; then

        # Add Block: Node
        #
        sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<NODEBLOCK
    ##
    # Redirect requests to node backend server
    ##
    location / {
      proxy_redirect off;
      proxy_pass http://node_${_SUB}${_DOMAIN};
      include /etc/nginx/snippets/proxy.conf;
    }

NODEBLOCK

        # Node config
        if [ ! -f "/etc/nginx/snippets/upstream_node_${_SUB}${_DOMAIN}.conf" ]; then
          sudo bash -c "cat > /etc/nginx/snippets/upstream_node_${_SUB}${_DOMAIN}.conf" <<UPSTREAMNDOE
upstream node_${_SUB}${_DOMAIN} {
    server 127.0.0.1:${_PORT};
}

UPSTREAMNDOE
        fi

        # Set the port
        if [ -f "/var/www/${_SUB}${_DOMAIN}/bin/www" ]; then
          if [[ $(grep "process.env.PORT || ${_PORT}" /var/www/${_SUB}${_DOMAIN}/bin/www &>/dev/null; echo $?) != 0 ]]; then
            sudo sed -i 's/^var port = normalizePort.*/var port = normalizePort(process.env.PORT || '${_PORT}');/g' /var/www/${_SUB}${_DOMAIN}/bin/www
          fi
        else
          printf "\nApparently there isn't an existing Node.js application in this location.\n"
          printf "Create one first with \`%s\` command,\nthen set the nginx server block for the application.\n" "$(basename "${0}") nodejs --app ${_SUB}${_DOMAIN}"
          _error "missing existing Node App"
        fi
      else # ...end if Odoo or Node

        # Add Block: 404 fall back
        #
        sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<EOF
    ##
    # Fall back to displaying a 404
    ##
    location / {
        try_files \$uri \$uri/ =404;
    }

EOF

        # Add Block: PHP
        #
        if hash php 2>/dev/null; then

          # Add to theblock: Php FastCGI
          #
          if [[ "${_BLOCK_TYPE:-basic}" == "fastcgi" ]]; then
            sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<FASTCGIBLOCK
    ##
    # Fascgi Cache
    ##
    set \$skip_cache 0;

    # POST requests and urls with a query string should always go to PHP
    if (\$request_method = POST) {
      set \$skip_cache 1;
    }
    if (\$query_string != "") {
        set \$skip_cache 1;
    }

    # Don't cache uris containing the following segments
    if (\$request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|/php-test/|/phpmyadmin/|/checkout/|/account/|/privacy.*/") {
        set \$skip_cache 1;
    }

    # Don't use the cache for logged in users or recent commenters
    if (\$http_cookie ~* "edd_items_in_cart|comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set \$skip_cache 1;
    }

    ##
    # PHP
    ##
    location ~ [^/]\.php(/|\$) {
        # The name of the cache key-zone to use
        fastcgi_cache fastcgicache_${_DOMAIN};
        # What to cache: 'code 200' responses, for half an hour
        fastcgi_cache_valid 200 30m;
        # What to cache: only GET and HEAD requests (POST)
        fastcgi_cache_methods GET HEAD;
        # Allow us to see if the cache was HIT, MISS, or BYPASSED inside
        # a browser's Inspector panel
        add_header X-Fastcgi-Cache \$upstream_cache_status;
        # Dont pull from the cache if true
        fastcgi_cache_bypass \$skip_cache;
        # Dont save to the cache if true
        fastcgi_no_cache \$skip_cache;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 3;
        proxy_cache_use_stale error timeout updating http_500 http_502
        http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        try_files \$uri =404;
        fastcgi_index index.php;
        fastcgi_pass unix:/run/php/php${_VER_PHP:-7.2}-fpm.sock;
        include /etc/nginx/fastcgi.conf;
    }

    # Check the page load response headers. Values of x-fastcgi-cache:
    # - HIT    - The page is being returned from the NGINX FastCGI cache
    # - MISS   - The page wasn't cached and was returned by PHP-FPM
    #            (refreshing the page should return either a HIT or a BYPASS)
    # - BYPASS - The page has been cached but the cached version wasn't served.
    #            This occurs when it is a page that we have specified
    #            to bypass the cache,
    #            such as an admin page, or when a user is logged in.

FASTCGIBLOCK
          else # ... end php fastcgi

            # Add Block: Basic Php
            #
            if [[ "${_BLOCK_TYPE:-basic}" == "php" ]]; then
              sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<BASICPHPBLOCK
    ##
    # Php
    ##
    location ~ \.php\$ {
        try_files \$uri =404;
        fastcgi_index index.php;
        fastcgi_pass unix:/run/php/php${_VER_PHP:-7.2}-fpm.sock;
        include /etc/nginx/fastcgi.conf;
    }

BASICPHPBLOCK
            fi # ...end basic php
          fi # ...end if not php fastcgi (basic php)

          # Add Block: PhpMyAdmin
          #
          if "${_PHP_ADMIN:-false}"; then
            sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<PHPMYADMINBLOCK
    ##
    # Php MyAdmin
    ##
    include /etc/nginx/snippets/phpmyadmin.conf;

PHPMYADMINBLOCK
          fi
        fi # ...end php
      fi # ...end if not Odoo

      # Add Block and finishing, closing: Restrictions
      #
      sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<EOF
    ##
    # Restrictions
    ##
    include /etc/nginx/snippets/restrictions.conf;
}
EOF
      ##
      # END SERVER BLOCK
      ##

      # Fastcgi Cache Path
      if hash php 2>/dev/null; then
        if [[ "${_BLOCK_TYPE:-basic}" == "fastcgi" ]]; then
          sudo bash -c "cat >> /etc/nginx/conf.d/${_SUB}${_DOMAIN}.conf" <<FASTCGICACHEPATH

    ##
    # Fastcgi Cache Path
    ##
    # fastcgi_cache_path /var/run/nginx-cache-fastcgi levels=1:2 keys_zone=fastcgicache_${_SUB}${_DOMAIN}:10m max_size=500m inactive=60m use_temp_path=off;
    fastcgi_cache_path ${_CACHE_PATH} levels=1:2 keys_zone=fastcgicache_${_SUB}${_DOMAIN}:10m max_size=500m inactive=60m use_temp_path=off;
FASTCGICACHEPATH
        fi
      fi

      # Reload Nginx
      sudo nginx -s reload || _error "reloading Nginx -- 'after adding a server block'"
      if "${_RELOAD_PM2:-false}"; then
        sudo pm2 reload ${_DOMAIN} --update-env || _error "reloading package manager"
      fi
      printf "\n  ✔  Server block for %s is ready!\n" "${_SUB}${_DOMAIN}"

      # Print message(s)
      if [[ -n ${_SUB:-} ]]; then
        _HOST_CONTENT="${_VAR[IP]} ${_DOMAIN} www.${_DOMAIN} ${_SUB}${_DOMAIN}"
      else
        _HOST_CONTENT="${_VAR[IP]} ${_DOMAIN} www.${_DOMAIN}"
      fi
      if "${_SSL:-false}"; then
        _SCHEME="https"
      else
        _SCHEME="http"
      fi

      # Localhost specific message
      if [ -d /home/vagrant ]; then
        printf "\n  Don't forget, if you are used Vagrantbox:\n"
        printf "  - add this entry to your \`/etc/hosts\` file (on host):\n    $(tput setaf 3)%s$(tput sgr0)\n" "${_HOST_CONTENT}"

        if "${_SSL:-false}"; then
          printf "  - go to ⇢  $(tput setaf 4)chrome://settings/certificates$(tput sgr0) and import the\n"
          printf "    \`../${_SUB}${_DOMAIN}/letsencrypt/%s-local-fullchain.crt\`\n    file to the Chrome* web browser\n" "${_DOMAIN}"
          printf "    $(tput sitm)$(tput setaf 244)* Chrome supports the self signed certificates$(tput sgr0)\n"
        fi
      fi

      [[ "${_DOMAIN}" == "${_VAR[Hostname]}" ]] && _DOMAIN=${_VAR[IP]}
      printf "\n  Open up your web browser and navigate to following url:\n  ⇢  $(tput setaf 4)%s://%s$(tput sgr0)\n" "${_SCHEME}" "${_SUB}${_DOMAIN}"
      if [ -d "/home/vagrant" ]; then
        # Info if MailCatcher running (Set your favourite app to deliver to local smtp://127.0.0.1:1025 instead of your default SMTP server.)
        if hash mailcatcher 2>/dev/null; then
          printf "  Check out and test your e-mail(s) here:\n  ⇢  $(tput setaf 4)http://%s:1080$(tput sgr0)\n" "${_VAR[IP]}"
        fi
      fi

    else # ... end if confirmation is YES
      printf "Exiting...\n"
      exit
    fi
  fi # ...end of creating server block

  # Disable a server block
  #
  if [[ -n "${_DISABLE_SITE}" ]]; then
    if [ -f "/etc/nginx/conf.d/${_DISABLE_SITE}.conf" ]; then
      sudo mv /etc/nginx/conf.d/${_DISABLE_SITE}.conf /etc/nginx/conf.d/${_DISABLE_SITE}.disabled
      printf " ✔  Site is disabled: %s\n" "${_DISABLE_SITE}"
    else
      if [ -f "/etc/nginx/conf.d/${_DISABLE_SITE}.disabled" ]; then
        printf " ✔  Site is already disabled: %s\n" "${_DISABLE_SITE}"
      else
        _error "there isn't any configuration for this domain -- '%s'\n" "${_DISABLE_SITE}"
      fi
    fi
  fi
}

# SSL certificate - Helper function for cmd_nginx()...
#
_ssl_certificate() {

  # Generate a Diffie-Hellman parameter
  if [ ! -f "/etc/letsencrypt/ssl-dhparams.pem" ]; then
    sudo mkdir -p /etc/letsencrypt
    (sudo openssl genpkey -genparam -algorithm DH -out /etc/letsencrypt/ssl-dhparams.pem -pkeyopt dh_paramgen_prime_len:4096 > /dev/null 2>&1) &
    _spinner $! "Generating DH parameters...\nOnly need to be generated once if it is not exists!\nThis is going to take a few (10-15) minutes."
  fi

  # Self-signed certificate
  if [ -d "/home/vagrant" ]; then
    if [ ! -f "/etc/letsencrypt/live/${_DOMAIN}/fullchain.pem" ]; then
      sudo cp -rf /etc/ssl/openssl.cnf /tmp/openssl.${_DOMAIN}.cnf
      sudo sed -i "1i SAN=\"email:info@${_DOMAIN}\"" /tmp/openssl.${_DOMAIN}.cnf
      # Create a certificate for default host
      #
      # Example Usage:
      #   --block VPS --ssl     Default host available at https://192.168.33.10
      #                         after you imported the VPS-fullchain crt. file(s) to the Chrome web browser
      #
      if [[ "${_DOMAIN}" == "${_VAR[Hostname]}" ]]; then
        sudo sed -i "s/^# Extensions for a typical CA/subjectAltName=IP:${_VAR[IP]}/g" /tmp/openssl.${_DOMAIN}.cnf
      else
        sudo sed -i "s/^# Extensions for a typical CA/subjectAltName=DNS:${_DOMAIN}, DNS:www.${_DOMAIN}, DNS:*.${_DOMAIN}/g" /tmp/openssl.${_DOMAIN}.cnf
      fi
      sudo mkdir -p /etc/letsencrypt/live/${_DOMAIN}
      sudo openssl req \
        -x509 -new -sha256 -days 365 -nodes -newkey rsa:2048 \
        -subj "/C=US/ST=New York/L=New York/O=123 SSL - Local Tester/OU=IT/CN=${_DOMAIN}" \
        -out /etc/letsencrypt/live/${_DOMAIN}/fullchain.pem \
        -keyout /etc/letsencrypt/live/${_DOMAIN}/privkey.pem \
        -config /tmp/openssl.${_DOMAIN}.cnf > /dev/null 2>&1 || _error "creating self-signed certificate -- '${_DOMAIN}'"
    fi

    # Import to web browsers (vagrant-triggers or manual import)
    cat "/etc/letsencrypt/live/${_DOMAIN}/fullchain.pem" | sudo tee ${_LETSENCRYPT_PATH}/${_DOMAIN}-local-fullchain.crt > /dev/null

    #  Including ssl stapling snippet --> Ssl stapling not supported on localhost
    # _SSL_STAPLING="include /etc/nginx/snippets/ssl-stapling.conf;"

  else

    # Let's Encrypt certificate
    if ! hash certbot 2>/dev/null; then
      sudo apt -y install software-properties-common
      sudo add-apt-repository ppa:certbot/certbot -y
      sudo apt update && sudo apt -y install certbot python-certbot-nginx
    fi
    if [ ! -d "${_LETSENCRYPT_PATH}/.well-known/acme-challenge" ]; then
      sudo mkdir -p "${_LETSENCRYPT_PATH}/.well-known/acme-challenge"
    fi

    # Run certbot (Test: certbot --dry-run)
    if [[ $(sudo certbot certificates 2>/dev/null | grep --quiet www.${_DOMAIN}; echo $?) != 0 ]]; then
      sudo certbot certonly --webroot --agree-tos --no-eff-email --email ${_CERT_EMAIL} -w ${_LETSENCRYPT_PATH} -d ${_DOMAIN} -d www.${_DOMAIN} || _error "creating Let’s Encrypt certificate -- '${_DOMAIN}'"
    fi

    # Expand certbot (for example new sub_DOMAIN) - Let’s Encrypt doesn’t offer wildcard (at the current time [2018-07-26])
    if [[ -n "${_SUB}" ]]; then
      if [[ $(sudo certbot certificates 2>/dev/null | grep --quiet ${_SUB}${_DOMAIN}; echo $?) != 0 ]]; then
        sudo certbot certonly --expand --agree-tos --no-eff-email -w ${_LETSENCRYPT_PATH} -d ${_DOMAIN} -d www.${_DOMAIN} -d ${_SUB}${_DOMAIN} || _error "creating Let’s Encrypt certificate -- '${_SUB}${_DOMAIN}'"
      fi
    fi

    # Including ssl stapling snippet
    _SSL_STAPLING="include /etc/nginx/snippets/ssl-stapling.conf;"

    # Message
    printf "\nCreating Let’s Encrypt certificate for https://%s is done\n" "${_SUB}${_DOMAIN}"
  fi
}

# Nginx block - Helper function for 'Nginx Server Block' whiptail menu
#
_nginx_block() {
  _SUB_SELECTION=$( whiptail --notags --title "Nginx Server Block" --radiolist "\nDo you want to manage a sub or main domain?" 10 65 2 \
      "false" "Main domain" ON \
      "true" "Sub domain" OFF \
    3>&1 1>&2 2>&3)
  [[ $? == 1 ]] && exit
  if "${_SUB_SELECTION}"; then
    _DOMAIN="$(whiptail --inputbox "\nEnter the main domain name (example.loc):" 8 75 --title "Nginx Server Block" 3>&1 1>&2 2>&3)"
    [[ $? == 1 ]] && exit
    _SUB_ALIAS="$(whiptail --inputbox "\nEnter the subdomain alias:" 8 75 --title "Nginx Server Block" 3>&1 1>&2 2>&3)"
    [[ $? == 1 ]] && exit
    _SUB_SET="--sub ${_SUB_ALIAS}"
  else
    _DOMAIN="$(whiptail --inputbox "\nEnter the domain name (example.loc):" 8 75 --title "Nginx Server Block" 3>&1 1>&2 2>&3)"
    [[ $? == 1 ]] && exit
    _SUB_SET=""
  fi

  if [ "${_DOMAIN}" != "" ]; then
    _DOMAIN_SET="--block ${_DOMAIN}"
  else
    _DOMAIN_SET="--block"
  fi

  _SSL_SELECTION=$( whiptail --notags --title "Nginx Server Block" --radiolist "\nDo you want to enable TLS for HTTPS connections?" 10 65 2 \
      "false" "No" ON \
      "true" "Yes (http2, TLSv1.3, TLSv1.2 and HSTS)" OFF \
    3>&1 1>&2 2>&3)
  [[ $? == 1 ]] && exit
  if "${_SSL_SELECTION}"; then
    _SSL_SET="--ssl"
  else
    _SSL_SET=""
  fi

  _BLOCK_TYPE_SELECTION=$( whiptail --notags --title "Nginx Server Block" --radiolist "\nWhat type of block do you want?" 14 65 5 \
      "basic" "Basic" ON \
      "php" "Php" OFF \
      "fastcgi" "Php FastCGI" OFF \
      "odoo" "Odoo" OFF \
      "nodejs" "Node.JS" OFF \
    3>&1 1>&2 2>&3)
  [[ $? == 1 ]] && exit

  _ROOT_PATH="$(whiptail --inputbox "\nEnter the custom root path /var/www: /your custom path\nLeave empty if you want to use default (/var/www/<domain name>)." 10 75 --title "Nginx Block: Root Path" 3>&1 1>&2 2>&3)"
  [[ $? == 1 ]] && exit
  if [ "${_ROOT_PATH}" != "" ]; then
    _ROOT_PATH_SET="--root ${_ROOT_PATH}"
  else
    _ROOT_PATH_SET=""
  fi

  cmd_nginx  ${_SSL_SET} --type=${_BLOCK_TYPE_SELECTION} ${_SUB_SET} ${_ROOT_PATH_SET} ${_DOMAIN_SET}

}

# Whiptail: Purge FasCGI cache
#
_menu_purge_cache() {
  _dimension
  unset _ENABLED_BLOCK
  for _FILENAME in /etc/nginx/conf.d/*.conf; do
    if [[ "${_FILENAME}" != "/etc/nginx/conf.d/default.conf" ]]; then
      _DOMAIN_NAME="${_FILENAME##*/}"
      _ENABLED_BLOCK+=("${_DOMAIN_NAME::-5}" "" OF)
    fi
  done

  _PURGE_CHACHE_LIST=$(whiptail --title "FasCGI Cache" --checklist "\n   Choose one or more domain to purge cache\n" \
      --separate-output --cancel-button "Back to Main Menu" --ok-button "Purge Cache" \
      $LINES $COLUMNS $(( $LINES - 14 )) \
      "${_ENABLED_BLOCK[@]}" \
    3>&1 1>&2 2>&3)

  if [ ${?} = 0 ]; then
    if [[ -z "${_PURGE_CHACHE_LIST[@]}" ]]; then
      whiptail --title "Info" --yes-button "Back" --no-button "Quit" --yesno "Nothing selected, so nothing happened!" 7 45 || exit
      _menu_purge_cache
    else
      for _SELECTED in "${_PURGE_CHACHE_LIST[@]}"; do
        sudo rm -rf /var/www/$_SELECTED/cache/*
      done
      whiptail --title "Success" --yes-button "Back to Menu" --no-button "Quit" --yesno "The FastCGI Cache has been purged." 7 53 || exit
      cmd_menu
    fi
  else
    cmd_menu
  fi
}

# COMMAND: MySQL
#
_HELP[mysql]=$(cat << HELPMYSQL
The \`mysql\` command installs a MySQL server.

 Usage:
   $(basename "${0}") mysql [options] [<arguments>...]

 Options:
   -c, --config        Config MySQL <<MYSQLCONFIG...
   -a, --add-user      Add new user with root privileges
   -b, --backup        Backup a database
   -i, --info          Display MySQL databases and user info
   -h, --help          Display this help
       --debug         Run debug mode
HELPMYSQL
)

cmd_mysql() {
  # Options parser
  _OPTS_MYSQL=$(getopt --options hcaib --long help,debug,config,add-user,info,backup --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_MYSQL}"

  while true ; do
    case "${1}" in
      -c|--config) _CONFIG=true ; shift ;;
      -a|--add-user) _ADD_NEW_USER=true ; shift ;;
      -b|--backup) _BACKUP=true ; shift ;;
      -i|--info) _INFO=true ; shift ;;
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if [[ $(dpkg-query -W --showformat='${Status}\n' mysql-server 2>/dev/null | grep "install ok installed" &> /dev/null; echo $?) != 0 ]]; then
    # Set password for root user
    _ROOT_MYSQL_PASS="$(whiptail --passwordbox "\nEnter root (strong) password for MySQL:" 8 75 --title "MySQL Server Installation" 3>&1 1>&2 2>&3)"

    # Install MySQL server
    sudo apt -y install mysql-server

    # MySQL secure installation
    sudo mysql -u root <<EOF
UPDATE mysql.user set authentication_string=PASSWORD('${_ROOT_MYSQL_PASS}') where User='root';
DELETE FROM mysql.user WHERE user='root' AND host NOT IN ('localhost', '127.0.0.1', '::1');
DELETE FROM mysql.user WHERE user='';
DELETE FROM mysql.db WHERE Db='test' OR Db='test_%';
FLUSH PRIVILEGES;
EOF

    # Start MySQL server
    sudo systemctl start mysql

    # Enable the database server starting after a reboot
    sudo systemctl enable mysql

    # Enable config at first install
    _CONFIG=true
  else
    if [[ "${_OPTS_MYSQL}" == " --" ]]; then
      printf "  ✔  MySQL Server is already installed\n"
    fi
  fi

  if "${_CONFIG:-false}"; then
    # Create custom config file
    sudo bash -c "cat > /etc/mysql/my.cnf" <<MYSQLCONFIG
#
# The MySQL database server configuration file.
#
# You can copy this to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
#
!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/
[mysqld]
#
# * Basic Settings
#
bind-address             = ${_VAR[IP]}
require_secure_transport = on
#
# * SSL Settings
#
# ssl-ca=/etc/mysql/ca.pem
# ssl-cert=/etc/mysql/server-cert.pem
# ssl-key=/etc/mysql/server-key.pem
#
# * Character set and collation
#
character-set-server     = utf8
collation-server         = utf8_general_ci
MYSQLCONFIG

    # Generate SSL/TLS Certificates and Keys
    sudo mysql_ssl_rsa_setup --uid=mysql

    # Install password validation plugin
    if [[ $(sudo mysql -u root -e "SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'validate%';" | grep ACTIVE &>/dev/null; echo $?) != 0 ]]; then
      sudo mysql -u root <<EOF
    INSTALL PLUGIN validate_password SONAME 'validate_password.so';
EOF
    fi

    # Allow UFW for MySQL
    sudo ufw allow mysql comment 'MySQL Server' &>/dev/null  && printf "  ⇢  Ufw rule: allow MySQL\n"

    # Restart service
    sudo systemctl restart mysql || _error "restarting MySQL"
    printf "  ✔  MySQL Server is installed and configured\n"
    printf "\n$(tput sitm)$(tput setaf 244)  You can add a new user (root privileges) with the following command:\n  \`%s\`$(tput sgr0)\n\n" "$(basename "${0}") mysql --add-user"
  fi

  if "${_ADD_NEW_USER:-false}"; then
    # Set name and password for new user
    _USER_MYSQL="$(whiptail --inputbox "\nEnter a new username for MysQL:" 8 75 --title "Add New MySQL User" 3>&1 1>&2 2>&3)"
    [[ $? == 1 ]] && exit
    _USER_MYSQL_PASS="$(whiptail --passwordbox "\nEnter your password:" 8 75 --title "Add New MySQL User" 3>&1 1>&2 2>&3)"
    [[ $? == 1 ]] && exit

    # Add new MySQL user with root privileges
    sudo mysql -u root <<EOF
CREATE USER IF NOT EXISTS '${_USER_MYSQL}'@'localhost' IDENTIFIED BY '${_USER_MYSQL_PASS}';
GRANT ALL PRIVILEGES ON *.* TO '${_USER_MYSQL}'@'localhost' WITH GRANT OPTION;
CREATE USER IF NOT EXISTS '${_USER_MYSQL}'@'%' IDENTIFIED BY '${_USER_MYSQL_PASS}';
GRANT ALL PRIVILEGES ON *.* TO '${_USER_MYSQL}'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;
EOF
  fi
  if [[ $? == 1 ]]; then
    printf "\nCurrent password requirements for MySQL:\n"
    sudo mysql -u root -e "SHOW VARIABLES LIKE 'validate%';"
  fi

  if "${_BACKUP:-false}"; then
    # Back up database
    _USER_MYSQL="$(whiptail --inputbox "\nEnter the database username:" 8 75 --title "Backup Database" 3>&1 1>&2 2>&3)"
    _DB_NAME="$(whiptail --inputbox "\nEnter the database name:" 8 75 --title "Backup Database" 3>&1 1>&2 2>&3)"
    mysqldump -u ${_USER_MYSQL} -p ${_DB_NAME} --single-transaction --quick --lock-tables=false > $HOME/backup-${_DB_NAME}-$(LC_ALL=C date +%Y%m%d_%H%M%S).sql
  fi

  if "${_INFO:-false}"; then
    # Show databases
    sudo mysql -u root -e "SHOW DATABASES;"

    # Show users
    sudo mysql -u root -e  "SELECT User, Host, authentication_string FROM mysql.user;"

    # Show password validation status
    sudo mysql -u root -e "SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'validate%';"
    sudo mysql -u root -e "SHOW VARIABLES LIKE 'validate%';"
  fi
}

# COMMAND: Php
#
_HELP[php]=$(cat << HELPHP
The \`php\` command installs PHP on system.

  Usage:
    $(basename "${0}") php [options] [<arguments>...]

  Options:
    -c, --config        Config Php <<PHPCONFIG...
                        and PhpMyAmin <<PHPMYADMINCONFIG...
    -h, --help          Display this help
        --debug         Run debug mode
        --force         Enable running on desktop
HELPHP
)

cmd_php() {
  # Options parser
  _OPTS_PHP=$(getopt --options hc --long help,debug,config,force --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_PHP}"

  while true ; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD}; shift ;;
      -c|--config) _CONFIG=true ; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --force) _FORCE=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if ! "${_FORCE:-false}"; then
    _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1
  fi

  local _VER_PHP="7.2"
  local _VER_PHP_MYADMIN="4.8.5"

  if ! hash php 2>/dev/null; then

    # Install php and modules
    sudo apt -y install php${_VER_PHP}-common php${_VER_PHP}-fpm \
      php${_VER_PHP}-mbstring \
      php${_VER_PHP}-xmlrpc \
      php${_VER_PHP}-gd \
      php${_VER_PHP}-xml \
      php${_VER_PHP}-mysql \
      php${_VER_PHP}-cli \
      php${_VER_PHP}-zip \
      php${_VER_PHP}-soap \
      php${_VER_PHP}-curl

    # Start MySQL server
    sudo systemctl start php${_VER_PHP}-fpm || _error "starting PHP"

    # Enable the database server starting after a reboot
    sudo systemctl enable php${_VER_PHP}-fpm || _error "enabling PHP"

    # Enable config at first install
    _CONFIG=true
  else
    if [[ "${_OPTS_PHP}" == " --" ]]; then
      printf "  ✔  PHP is already installed\n"
    fi
  fi

  if "${_CONFIG:-false}"; then
    _check_timezone

    sudo bash -c "cat > /etc/php/${_VER_PHP}/fpm/conf.d/myphp.ini" <<EOF
cgi.fix_pathinfo = 0
memory_limit = 256M
post_max_size = 64M
upload_max_filesize = 64M
max_execution_time = 300
max_input_time = 1000
session.cookie_secure = 1
session.use_only_cookies = 1
session.use_strict_mode = 1
# opcache.enable=1
# opcache.memory_consumption=128
# opcache.interned_strings_buffer=8
# opcache.max_accelerated_files=4000
# realpath_cache_size = 64k
# realpath_cache_ttl = 3600
log_errors = On
error_reporting = E_ALL
display_errors = Off
error_log = /var/log/php_error.log
date.timezone = ${_VAR[Timezone]}
disable_functions = exec,shell_exec,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,
EOF

    # PhpMyAdmin
    #
    # Update PhpMyAdmin:
    #   remove /usr/share/phpmyadmin and run this script with `php` command
    #
    if [ ! -d "/usr/share/phpmyadmin " ]; then
      sudo mkdir -p /usr/share/phpmyadmin
      if [ ! -d "/tmp/phpMyAdmin-${_VER_PHP_MYADMIN}-english/" ]; then
        wget -qO- https://files.phpmyadmin.net/phpMyAdmin/${_VER_PHP_MYADMIN}/phpMyAdmin-${_VER_PHP_MYADMIN}-english.tar.gz -O /tmp/phpMyAdmin-${_VER_PHP_MYADMIN}-english.tar.gz
        tar -xvzf /tmp/phpMyAdmin-${_VER_PHP_MYADMIN}-english.tar.gz -C /tmp
        sudo mv -f /tmp/phpMyAdmin-${_VER_PHP_MYADMIN}-english/* /usr/share/phpmyadmin/
      fi

      # Fix X-XSS-Protection duplicate error in console of Chrome
      # sudo sed -i '/X-XSS-Protection/s/^/\/\//' /usr/share/phpmyadmin/libraries/classes/Header.php
      # opposite operation: '/X-XSS-Protection/s/^#//'
    fi

    # PhpMyAdmin config file
    if ! hash 2>/dev/null 'pwgen'; then sudo apt-get -y install pwgen; fi ; _BLOWFISH_SEC=$(pwgen -s 32 1)

    sudo bash -c "cat > /usr/share/phpmyadmin/config.inc.php" <<PHPMYADMINCONFIG
<?php
/* Servers configuration */
\$i = 0;
/* Server: localhost [1] */
\$i++;
\$cfg['Servers'][\$i]['verbose']      = '';
\$cfg['Servers'][\$i]['host']         = '${_VAR[IP]}';
\$cfg['Servers'][\$i]['port']         = '';
\$cfg['Servers'][\$i]['socket']       = '';
\$cfg['Servers'][\$i]['auth_type']    = 'cookie';
\$cfg['Servers'][\$i]['user']         = '';
\$cfg['Servers'][\$i]['password']     = '';
\$cfg['Servers'][\$i]['AllowRoot']    = false;
\$cfg['Servers'][\$i]['extension']    = 'mysqli';
\$cfg['Servers'][\$i]['ssl']          = true;
\$cfg['Servers'][\$i]['ssl']          = true;
\$cfg['Servers'][\$i]['ssl_verify']   = false;
/* End of servers configuration */
\$cfg['blowfish_secret']                   = '${_BLOWFISH_SEC}';
\$cfg['DefaultLang']                       = 'en';
\$cfg['ServerDefault']                     = 1;
\$cfg['UploadDir']                         = '/var/www/';
\$cfg['SaveDir']                           = '/var/www/';
\$cfg['BZipDump']                          = false;
\$cfg['PmaNoRelation_DisableWarning']      = true;
\$cfg['NavigationDisplayLogo']             = false;
\$cfg['LoginCookieValidityDisableWarning'] = true;
\$cfg['Server']['hide_db']                 = '';
\$cfg['collation_connection']              = 'utf8_unicode_ci';
\$cfg['VersionCheck']                      = false;
?>
PHPMYADMINCONFIG

    # Premissions
    local _USER_WEB="www-data"
    sudo chown -R ${_USER_WEB}:${_USER_WEB} /usr/share/phpmyadmin
    sudo chmod 755 -R /usr/share/phpmyadmin
    if [ -f "/usr/share/phpmyadmin/tmp" ]; then
      sudo chmod 700 /usr/share/phpmyadmin/tmp
    fi
    sudo chmod 644 /usr/share/phpmyadmin/config.inc.php

    # Restart service
    sudo systemctl restart php${_VER_PHP}-fpm || _error "starting PHP"
    if hash nginx 2>/dev/null; then
      sudo systemctl restart nginx || _error "restarting Nginx after PHP settings"
    fi
    printf "  ✔  PHP is installed and configured\n"
  fi
}

# COMMAND: LEMP
#
_HELP[lemp]=$(cat << HELPLEMP
The \`lemp\` command buids a LEMP Stack with one command.

The LEMP (Linux + Nginx + MySQL + PHP) stack is a useful, free, and open-source
web stack for hosting web content in a Linux environment.

  Usage:
    $(basename "${0}") lemp

  Options:
    -h, --help          Display this help
        --debug         Run debug mode
        --force         Enable running on desktop
HELPLEMP
)

cmd_lemp() {
  # Options parser
  _OPTS_LEMP=$(getopt --options h --long help,debug,force --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_LEMP}"

  while true ; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --force) _FORCE=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  if ! "${_FORCE:-false}"; then
    _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1
  fi

  cmd_nginx
  cmd_mysql
  cmd_php
  printf "  ✔  LEMP Stack is OK\n"
  printf "  ⇢  Default server: $(tput setaf 4)http://%s$(tput sgr0)\n" "${_VAR[IP]}"
}

# COMMAND: Odoo
#
_HELP[odoo]=$(cat << HELPODOO
The \`odoo\` command buids an Odoo server.

  Usage:
    $(basename "${0}") odoo [options] [<arguments>...]

  Options:
    -c, --config        Config Oddo server <<ODOCONFIG...
    -u, --update        Update Odoo server
    -m, --module        Add third-party modules for Odoo
    -h, --help          Display this help
        --debug         Run debug mode
HELPODOO
)

cmd_odoo() {
  # Options parser
  _OPTS_ODOO=$(getopt --options hcum --long help,debug,config,update,module --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_ODOO}"

  while true ; do
    case "${1}" in
      -c|--config) _CONFIG=true ; shift ;;
      -u|--update) _UPDATE=true ; shift ;;
      -m|--module) _MODULE=true ; shift ;;
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1

  local _VER_ODOO="12.0"

  if [ ! -f "/opt/odoo/odoo-bin" ]; then

    # Install dependencies
    sudo apt -y install python3-pip postgresql \
      node-clean-css node-less \
      libxml2-dev libxslt1-dev libevent-dev libsasl2-dev libldap2-dev \
      git

    # Create odoo user
    if ! sudo su - postgres -c "psql -c '\du'" | grep odoo > /dev/null; then
      # Create user with password (https://www.postgresql.org/docs/10/sql-createuser.html)
      _USER_ODDO_PASS="$(whiptail --passwordbox "\nEnter the password for Odoo user:" 8 78 --title "Password for Odoo User" 3>&1 1>&2 2>&3)"
      sudo su - postgres -c "psql -c \"CREATE USER odoo WITH PASSWORD '${_USER_ODDO_PASS}' CREATEDB NOSUPERUSER NOCREATEROLE;\""
      # Add user to system user
      sudo adduser --system --home=/opt/odoo --group odoo
    fi

    # Download Odoo
    sudo git clone https://github.com/odoo/odoo.git --depth 1 --branch ${_VER_ODOO} --single-branch /opt/odoo

    # Install python dependencies
    sudo -H pip3 install -r /opt/odoo/requirements.txt && sudo -H pip3 install -r /opt/odoo/doc/requirements.txt
    sudo -H pip3 install odoo-autodiscover setuptools-odoo
    cd /opt/odoo
    sudo -H pip3 install -U pip
    sudo -H pip3 install -e .
    python -c "import odoo.api"
    cd

    # Enable config at first install
    _CONFIG=true
  else
    if [[ "${_OPTS_ODOO}" == " --" ]]; then
      printf "  ✔  Odoo is already installed\n"
    fi
  fi

  if "${_CONFIG:-false}"; then

    # Install Wkhtmltopdf dependencies
    if [ ! -f "/usr/local/bin/wkhtmltopdf" ]; then
      if [ ! -f "/tmp/vagrant.deb" ]; then
        wget https://builds.wkhtmltopdf.org/0.12.1.3/wkhtmltox_0.12.1.3-1~bionic_amd64.deb -O /tmp/wkhtmltox.deb
      fi
      sudo dpkg -i /tmp/wkhtmltox.deb
      sudo apt install -fy
      sudo ln -sf /usr/local/bin/wkhtmltopdf /usr/bin
      sudo ln -sf /usr/local/bin/wkhtmltoimage /usr/bin
    fi

    # Variables
    _USER_ODOO_MASTER_PASS="admin"
    _ODOO_DB_FILTER=""
    _ODO_MANAGE_DB=false
    [ -d "/home/vagrant" ] && _ODO_MANAGE_DB="true"

    # Don't overwrite some existing variables
    if [ -f "/etc/odoo-server.conf" ]; then
      if [[ $(sudo grep admin_passwd /etc/odoo-server.conf | cut -d' ' -f3) != "admin" ]]; then
        _USER_ODOO_MASTER_PASS=$(sudo grep admin_passwd /etc/odoo-server.conf | cut -d' ' -f3)
      fi
      if [[ $(sudo grep dbfilter /etc/odoo-server.conf | cut -d' ' -f3) != "" ]]; then
        _ODOO_DB_FILTER=$(sudo grep dbfilter /etc/odoo-server.conf | cut -d' ' -f3)
      fi
    fi

    # Config file
    _TOTAL_MEMORY_BYTES="$(free -b | grep Mem | awk '{print $2}')"
    _MAX_WORKERS="${_VAR[CPUs]}" # number of CPUs/cores

    sudo bash -c "cat > /etc/odoo-server.conf" <<ODOCONFIG
[options]
addons_path = /opt/odoo/addons,/opt/odoo/custom_addons
admin_passwd = ${_USER_ODOO_MASTER_PASS}
csv_internal_sep = ,
data_dir = /opt/odoo/.local/share/Odoo
db_host = False
db_maxconn = 64
db_name = False
db_password = FALSE
db_port = False
db_sslmode = prefer
db_template = template0
db_user = odoo
dbfilter = ${_ODOO_DB_FILTER}
demo = {}
email_from = False
geoip_database = /usr/share/GeoIP/GeoLite2-City.mmdb
http_enable = True
http_interface =
http_port = 8069
import_partial =
limit_memory_hard = $((${_TOTAL_MEMORY_BYTES}/${_MAX_WORKERS}*80/100))
limit_memory_soft = $((${_TOTAL_MEMORY_BYTES}/${_MAX_WORKERS}*80/100*80/100))
limit_request = 8192
limit_time_cpu = 600
limit_time_real = 1200
limit_time_real_cron = -1
list_db = ${_ODO_MANAGE_DB}
log_db = False
log_db_level = warning
log_handler = :INFO
log_level = info
logfile = None
logrotate = False
longpolling_port = 8072
max_cron_threads = 1
osv_memory_age_limit = 1.0
osv_memory_count_limit = False
pg_path = None
pidfile = None
proxy_mode = True
reportgz = False
server_wide_modules = base,web
smtp_password = False
smtp_port = 25
smtp_server = localhost
smtp_ssl = False
smtp_user = False
syslog = False
test_enable = False
test_file = False
test_tags = None
translate_modules = ['all']
unaccent = False
without_demo = True
workers = $((${_MAX_WORKERS}-1))
# Disable direct access to your Odoo instance
# xmlrpc = True
# xmlrpc_interface = 127.0.0.1
# xmlrpc_port = 8069
# xmlrpcs = True
# xmlrpcs_interface = 127.0.0.1
# xmlrpcs_port = 8071
ODOCONFIG

    # Odoo init script
    if [ -f"/lib/systemd/system/odoo-server.service" ]; then
      _RELOAD_DEAMON=true
    fi

    sudo bash -c "cat > /lib/systemd/system/odoo-server.service" <<ODOOINIT
[Unit]
Description=Odoo Open Source ERP and CRM
Requires=postgresql.service
After=network.target postgresql.service
[Service]
Type=simple
PermissionsStartOnly=true
SyslogIdentifier=odoo-server
User=odoo
Group=odoo
ExecStart=/opt/odoo/odoo-bin --config=/etc/odoo-server.conf --addons-path="/opt/odoo/addons,/opt/odoo/custom_addons"
WorkingDirectory=/opt/odoo/
StandardOutput=journal+console
[Install]
WantedBy=multi-user.target
ODOOINIT

    # Reload deamon because of the modify (update)
    if "${_RELOAD_DEAMON:-false}"; then
      sudo systemctl daemon-reload > /dev/null
    fi

    # Create custom addons folder and a module
    sudo mkdir -p /opt/odoo/custom_addons/
    if [ ! -d "/opt/odoo/custom_addons/dummy-modul" ]; then
      sudo /opt/odoo/odoo-bin scaffold dummy-modul /opt/odoo/custom_addons/
    fi

    # Set ownership and permissions
    sudo chmod 755 /lib/systemd/system/odoo-server.service
    sudo chown root: /lib/systemd/system/odoo-server.service
    sudo chown -R odoo: /opt/{odoo,odoo/custom_addons}
    if [ -d "/var/log/odoo/" ]; then
      sudo chown odoo:root /var/log/odoo/
    fi
    sudo chown odoo: /etc/odoo-server.conf
    sudo chmod 640 /etc/odoo-server.conf

    # Allow UFW for Odoo
    sudo ufw allow 8069/tcp comment 'Odoo Server' &>/dev/null  && printf "  ⇢  Ufw rule: allow Odoo server\n"

    # Odoo service
    if [[ $(systemctl status odoo-server | grep Active: | cut -d ' ' -f 5) != "active" ]]; then
      sudo systemctl enable odoo-server || _error "enabling Odoo server"
    fi
    sudo systemctl restart odoo-server || _error "starting Odoo server"
    printf "  ✔  Odoo server is setting and running\n"
  fi

  if "${_UPDATE:-false}"; then
    cd /opt/odoo
    sudo git fetch origin ${_VER_ODOO}
    sudo git reset --hard origin/${_VER_ODOO}
    cd
    # Install python dependencies
    sudo -H pip3 install -r /opt/odoo/requirements.txt > /dev/null
    sudo -H pip3 install -r /opt/odoo/doc/requirements.txt > /dev/null
    sudo systemctl restart odoo-server || _error "restarting Odoo after updating - 'systemctl'"
    printf "  ✔  Odoo server is up to date!"
  fi

  # Download third-party modules
  if "${_MODULE:-false}"; then
    _ODOO_BRANCH=$(echo ${_VER_ODOO} | cut -d. -f1)
    # Usefull OCA modules (https://github.com/OCA/website/)
    sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-website-cookie-notice odoo-autodiscover
    sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-website-legal-page odoo-autodiscover
    sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-website-crm-privacy-policy odoo-autodiscover
    sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-website-odoo-debranding odoo-autodiscover
    sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-website-canonical-url odoo-autodiscover
    sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-web-favicon odoo-autodiscover
    # sudo -H pip3 install odoo${_ODOO_BRANCH}-addon-web-data-protection odoo-autodiscover
  fi

  printf "  Open a new browser window and visit the address:\n  ⇢ $(tput setaf 4)http://%s:8069$(tput sgr0)\n" "${_VAR[IP]}"
  printf "\nTIP:\n  Adding or changing a server block are used\n  \`nginx --type=odoo\` command option.\n"
}

# COMMAND: Node.js
#
_HELP[nodejs]=$(cat << HELPNODEJS
The \`nodejs\` command buids a Node.JS web server.

  Usage:
    $(basename "${0}") nodejs [options] [<arguments>...]

  Options:
    -a, --app <name>    Create an application (with express)
                        in the current working directory
    -h, --help          Display this help
        --debug         Run debug mode
HELPNODEJS
)

cmd_nodejs() {
  # Options parser
  _OPTS_NODEJS=$(getopt --options ha: --long help,debug,app: --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_NODEJS}"

  while true ; do
    case "${1}" in
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      -a|--app) _APP_NAME="${2}" ; shift 2 ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  local _VER_LAT_NVM="$(curl -s "https://api.github.com/repos/nvm-sh/nvm/releases/latest" | awk -F '"' '/tag_name/{print $4}' | cut -dv -f2)"
  local _VER_CUR_NVM="0"

  if [ -f ~/.nvm/nvm.sh ]; then
    source ~/.nvm/nvm.sh
    source ~/.profile
    source ~/.bashrc
    _VER_CUR_NVM="$(nvm --version)"
  fi

  # Install or update automatically latest Node Version Manager
  if _check_version "${_VER_LAT_NVM}" "${_VER_CUR_NVM}" ; then
    mkdir -p ~/.nvm
    sudo apt -y install build-essential libssl-dev
    wget -qO- https://raw.githubusercontent.com/creationix/nvm/v${_VER_LAT_NVM}/install.sh | bash
    source ~/.nvm/nvm.sh
    source ~/.profile
    source ~/.bashrc
  fi

  # To check if nvm is running
  if $(nvm &>/dev/null); then
    printf "  ✔  Node Version Manager (%s) is running and up to date\n" "$(nvm --version)"
  else
    _error "Node Version Manager isn't running" # exiting..
  fi

  # Install Node
  if ! hash node 2>/dev/null; then
    nvm install node

    # Install application generator tool for Node.js
    npm install -g express-generator
    # Install process manager for Node.js
    npm install -g pm2
    # Starting an app: `pm2 start app.js `

    # Set the permissions so that all users can access the node
    local _NODE_PATH=$(which node)
    _NODE_PATH=${_NODE_PATH%/bin/node}
    chmod -R 755 $_NODE_PATH/bin/*
    # sudo cp -r $_NODE_PATH/{bin,lib,share} /usr/local
    sudo ln -sf $_NODE_PATH/bin/* /usr/local/bin/
    sudo ln -sf $_NODE_PATH/lib/* /usr/local/lib/
    sudo ln -sf $_NODE_PATH/share/* /usr/local/share/
    _START_NODE_SERVICE=true
  fi

  # Generate an application (https://expressjs.com/en/starter/generator.html)
  if [[ -n "${_APP_NAME:-}" ]]; then
    if ! _check_desktop; then
      if [[ ! "$PWD" =~ ^/var/www(.*) ]]; then
        _error "change the working directory to \`/var/www\` and run command again"
      fi
    else
      printf "\nCreating an application for Node.js here:\n- current working directory $(tput setaf 3)%s$(tput sgr0)\n" "$PWD"
      read -p "Are you sure? [y/n] " REPLY
      if [[ "${REPLY:-}" =~ ^[Nn]$ ]]; then
        printf "Exiting...\n" && exit
      fi
    fi
    sudo express --view=ejs ${_APP_NAME}
    cd $PWD/${_APP_NAME}
    sudo npm install
    sudo pm2 start ./bin/www -n ${_APP_NAME}
    if _check_desktop; then
      printf "\n  Open up your web browser and navigate to following url:\n  ⇢  $(tput setaf 4)http://localhost:3000$(tput sgr0)\n"
    fi
    sudo pm2 save
  fi

  # Init script (http://pm2.keymetrics.io/docs/usage/startup/)
  if "${_START_NODE_SERVICE:-false}"; then
    local _VER_NODE="$(node -v)"
    # pm2 startup
    sudo env PATH=$PATH:${HOME}/.nvm/versions/node/${_VER_NODE}/bin $HOME/.nvm/versions/node/${_VER_NODE}/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME
    sudo pm2 save
    # Remove init script: `pm2 unstartup systemd`
  fi
}

# COMMAND: Apache
#
_HELP[apache]=$(cat << HELPAPACHE
The \`apache\` command buids an Apache server.

  Usage:
    $(basename "${0}") apache [options] [<arguments>...]

  Options:
    -c, --config             Config Apache2
    -v, --vhost   <domain>   Add or config a virtual host
    -d, --disable <domain>   Disable the <domain> virtual host:
    -h, --help               Display this help
        --debug              Run debug mode
HELPAPACHE
)

cmd_apache() {
  # Options parser
  _OPTS_APACHE=$(getopt --options hcv:d: --long help,debug,config,vhost:,disable: --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [ $? != 0 ] ; then _error "invalid option(s)" ; fi
  eval set -- "${_OPTS_APACHE}"

  while true ; do
    case "${1}" in
      -c|--config) _CONFIG_APACHE=true ; shift ;;
      -v|--vhost) _VHOST=true ; _DOMAIN="${2}" ; shift 2 ;;
      -d|--disable) _VHOST_DISABLE=true ; _DOMAIN="${2}" ; shift 2 ;;
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1

  local _ROOT_PATH="/var/www/${_DOMAIN}"

  if ! hash apache2 2>/dev/null; then
    sudo apt install -y apache2
    # Check if Nginx will automatically initiate after a reboot:
    if [[ $(systemctl is-enabled apache2.service) != "enabled" ]]; then
      sudo systemctl enable apache2.service || _error "configure and enable Apache -- 'sysremctl'"
    fi
    _CONFIG_APACHE=true
  fi

  if "${_CONFIG_APACHE:-false}"; then
    sudo a2dissite *default
    sudo ufw allow 'Apache Full' comment 'Apache server' &>/dev/null  && printf "  ⇢  Ufw rule: allow Apache Full\n"
  fi

  if "${_VHOST:-false}"; then
    sudo mkdir -p ${_ROOT_PATH}/{public,log,cache,letsencrypt}

    sudo bash -c "cat > /etc/apache2/sites-available/${_SUB}${_DOMAIN}.conf" <<APACHEVHOST
<VirtualHost *:80>

    ServerAdmin webmaster@${_DOMAIN}
    ServerName  ${_DOMAIN}
    ServerAlias www.${_DOMAIN}

    DirectoryIndex index.html index.php
    DocumentRoot ${_ROOT_PATH}/public

    LogLevel warn
    ErrorLog  ${_ROOT_PATH}/log/error.log
    CustomLog ${_ROOT_PATH}/log/access.log combined
</VirtualHost>
APACHEVHOST

    sudo a2ensite ${_SUB}${_DOMAIN}.conf || _error "enabling site for Apache"
    sudo systemctl reload apache2 || _error "reloading Apache server"
  fi

  if "${_VHOST_DISABLE:-false}"; then
    sudo a2dissite ${_DOMAIN}.conf
    sudo systemctl reload apache2 || _error "reloading Apache server"
  fi
}

# COMMAND: WordPress CLI
#
_HELP[wp]=$(cat << HELPWORDPRESS
The \`wp\` command installs WordPress CLI on system.

  Usage:
    $(basename "${0}") wp [options] [<arguments>...]

  Options:
    -i, --install <path> Download and install WordPress
    -u, --update  <path> Updating WordPress core
    -h, --help           Display this help
        --debug          Run debug mode
HELPWORDPRESS
)

cmd_wp() {
  # Options parser
  _OPTS_WP=$(getopt --options hi:u:t --long help,debug,install:,update:,test --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [[ $? != 0 ]] ; then exit 1 ; fi
  eval set -- "${_OPTS_WP}"

  while true ; do
    case "${1}" in
      -i|--install) _WP_INSTALL=true ; _WP_ROOT="${2}" ; shift 2 ;;
      -u|--update) _WP_UPDATE=true ; _WP_ROOT="${2}" ; shift 2 ;;
      -t|--test) _WP_TEST=true ; shift ;;
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1

  hash nginx 2>/dev/null || _error "no Nginx installed, first install it..."
  hash php 2>/dev/null   || _error "no PHP installed, first install it..."
  hash mysql 2>/dev/null || _error "no MySQL installed, first install it..."

  local _WP_PLUGINS="wordpress-importer"
  local _WP_THEMES="twentyseventeen twentynineteen"

  # Download WP-CLI
  if ! hash wp 2>/dev/null; then
    sudo wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -O /usr/bin/wp
    sudo chmod +x /usr/bin/wp
    printf "WordPress CLI Info:\n"
    sudo wp --info
    sudo wp cli update
  else
    if [[ "${_OPTS_WP}" == " --" ]]; then
      printf "  ✔  %s for WordPress is installed!\n" "$(wp --version)"
    fi
  fi

  # Build WP
  if "${_WP_INSTALL:-false}"; then

    if [ -f "${_WP_ROOT}/wp-config.php" ]; then
      printf "WordPress is already installed!\n"
      read -p "Do you want me to update WordPress? [y/n] " REPLY
      if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
        _WP_UPDATE=true
      fi
    else
      printf "You want install WordPres in this location:\n  ⇢  %s\n\n" "${_WP_ROOT}"
      printf "  - the location must be on /var/www/...\n"
      printf "  - just continue if you have already created a mysql user\n"
      read -p "Are you sure you want to continue?? [y/n] " REPLY

      if [[ "${REPLY:-}" =~ ^[Nn]$ ]]; then
        printf "Exiting...\n" && exit
      fi

      printf "\nNew Database for WordPress:\n"
      read -p "Enter the database name (can be new as well): " _WP_DB_NAME
      read -p "Enter the database user name (!! existing user !!): " _WP_DB_USER
      read -p "Enter the password for ${_WP_DB_USER} user: " -s _WP_DB_PASSWORD
      if "${_WP_TEST:-false}"; then
        _WP_TITLE="Example for Wordpress"
        _WP_USER_MAIL="example@example.loc"
        _WP_USER="${_WP_USER_MAIL}"
        _WP_USER_PASSWORD="${_WP_USER_MAIL}"
        printf "\nWordPress Settings:\n"
        read -p "Enter the address of the new site: http://" _WP_URL
      else
        printf "\nWordPress Settings:\n"
        read -p "Enter the address of the new site: http://" _WP_URL
        read -p "Enter the title of the new site: " _WP_TITLE
        # read -p "Enter the username of the site admin: " _WP_USER
        read -p "Enter the email address for the admin user: " _WP_USER_MAIL
        _WP_USER=${_WP_USER_MAIL}
        read -p "Enter the password of the site admin: " -s _WP_USER_PASSWORD
      fi
      printf "\n"

      # Download WP (without the default themes and plugins)
      if [ ! -d "${_WP_ROOT}/wp-includes" ]; then
        sudo wp core download --allow-root --skip-content --path=${_WP_ROOT} || _error "downloading WordPress"
      fi

      # WP Config file
      sudo grep "require_secure_transport = on" /etc/mysql/*.cnf > /dev/null || _SSL_DB_CONNECTION="# "
      # _WP_DB_PREF="$(printf "WP_%s_" "$RANDOM"
      _WP_DB_PREF="WP_"

      sudo wp core config --allow-root --skip-check \
        --path=${_WP_ROOT} \
        --dbname=${_WP_DB_NAME} \
        --dbuser=${_WP_DB_USER} \
        --dbpass=${_WP_DB_PASSWORD} \
        --dbhost=${_VAR[IP]} \
        --dbprefix=${_WP_DB_PREF} \
        --extra-php <<PHP
/**
 * This tells WordPress to use an SSL connection to our MySQL database
 */
define('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL);

/**
 * Change the default autosave interval from 60 seconds to 5 minutes and set number (or disable) of post revisions
 */
define( 'AUTOSAVE_INTERVAL', 300 );
define( 'WP_POST_REVISIONS', false );

/**
 * Custom folder
 */
// define( 'UPLOADS', ''.'media' );

/**
 * If true, you can access the optimization tool at http://domain/wp-admin/maint/repair.php
 */
// define( 'WP_ALLOW_REPAIR', true );

/**
 * Overrides the wp_options table value for these but does not change it in the database
 */
// define( 'WP_SITEURL', '' );
// define( 'WP_HOME', '' );

/**
 * Cron settings
 */
// define( 'ALTERNATE_WP_CRON', true );
// define( 'DISABLE_WP_CRON', 'true');
// define( 'WP_CRON_LOCK_TIMEOUT', 900);

/**
 * Disable the Plugin and Theme Editor
 */
define( 'DISALLOW_FILE_EDIT', true );

/**
 * Jetpack developer mode
 */
// define( 'JETPACK_DEV_DEBUG', false );

/** EDD
 * https://docs.easydigitaldownloads.com/article/185-shopping-cart-is-empty-at-checkout
 */
// define( 'EDD_USE_PHP_SESSIONS', false );

/**
 * WP Mail SMTP Plugin settings
 */
// define( 'WPMS_ON', true );
// define( 'WPMS_SMTP_PASS', 'password_here' );

/**
 * Debug
 */
define( 'WP_DEBUG', false );

PHP

      if [[ $? != 0 ]]; then
        _error "setting WordPress"
      fi

      # Create a database, if not exists
      if [[ $(sudo mysql -u root -e "SHOW DATABASES;" | grep "${_WP_DB_NAME}$" &>/dev/null; echo $?) != 0 ]]; then
        sudo wp db create --allow-root --path=${_WP_ROOT} || _error "creating database for WordPress"
      fi

      # Install WP
      sudo wp core install --allow-root --skip-email --path=${_WP_ROOT} \
        --url=${_WP_URL} \
        --title="${_WP_TITLE}" \
        --admin_user=${_WP_USER} \
        --admin_password=${_WP_USER_PASSWORD} \
        --admin_email=${_WP_USER_MAIL} || _error "installing WordPress"

      # Install and activate plugin and themes instead of wordpress defaults
      if [[ ! -z "${_WP_PLUGINS}" ]]; then
        sudo wp plugin install --allow-root --activate --path=${_WP_ROOT} ${_WP_PLUGINS}
      fi
      if  [[ ! -z "${_WP_THEMES}" ]]; then
        sudo wp theme install --allow-root --activate --path=${_WP_ROOT} ${_WP_THEMES}
      fi

      # Delete
      # sudo wp plugin delete --allow-root --path=${_WP_ROOT} akismet hello
      # sudo wp theme delete --allow-root --path=${_WP_ROOT} twentyfifteen twentysixteen

      # WordPress Cron
      if [ ! -f /etc/cron.daily/wordpress ]; then
        sudo touch /etc/cron.daily/wordpress
        sudo chmod +x /etc/cron.daily/wordpress
      fi
      grep "wp transient delete --allow-root --expired --path=${_WP_ROOT} > /dev/null" /etc/cron.daily/wordpress > /dev/null || sudo bash -c 'echo "wp transient delete --allow-root --expired --path=${_WP_ROOT} > /dev/null" >> /etc/cron.daily/wordpress'
      grep "wp cache flush --allow-root --path=${_WP_ROOT} > /dev/null" /etc/cron.daily/wordpress > /dev/null || sudo bash -c 'echo "wp cache flush --allow-root --path=${_WP_ROOT} > /dev/null" >> /etc/cron.daily/wordpress'

      # Remove index.html if exists
      if [ -f ${_WP_ROOT}/index.html ]; then
        sudo rm ${_WP_ROOT}/index.html
      fi
    fi # ...end downloading and installing of WordPress
  fi

  if "${_WP_UPDATE:-false}"; then
    if [ -f "${_WP_ROOT}/wp-config.php" ]; then
      sudo -u www-data wp core update --allow-root --path=${_WP_ROOT} || _error "updating WordPress core"
      sudo -u www-data wp core update-db --allow-root --path=${_WP_ROOT} || _error "updating WordPress core database"
      sudo -u www-data wp theme update --allow-root --all --path=${_WP_ROOT} || _error "updating WordPress theme"
    else
      _error "this location is not a root path a WordPress site"
    fi
  fi
}

# COMMAND: Multi Boot USB
#
_HELP[bootusb]=$(cat << HELPBOOTUSB
The \`bootusb\` command creates a Multi Boot USB drive.

  Usage:
    $(basename "${0}") bootusb [options]

  Options:
    -i, --iso            Download ISO files [ /dev/sdb2/media/data/iso ]
                           - Ubuntu 19.04
                           - Ubuntu 18.04 LTS
                           - Elementary OS 5.0 Juno
    -h, --help           Display this help
        --debug          Run debug mode
HELPBOOTUSB
)

cmd_bootusb () {
  # Options parser
  _OPTS_BOOTUSB=$(getopt --options hi --long help,debug,iso --name "$(basename "${0}") ${_CMD}" -- "${@}")
  if [[ $? != 0 ]] ; then exit 1 ; fi
  eval set -- "${_OPTS_BOOTUSB}"

  while true ; do
    case "${1}" in
      -i|--iso) _ISO_DOWNLOAD=true ; shift ;;
      -h|--help) cmd_help ${_CMD}; shift ;;
      --debug) set -x ; _DEBUG=true ; shift ;;
      --) shift ; break ;;
      *) _error "internal option error '${1}'" ;;
    esac
  done

  ! _check_desktop && printf "%b\n" "${_CHAS_MESSAGE}" && exit 1

  printf "You will need a pendrive with a capacity of at least 6 GB (for 3 ISOs).\n"
  printf "... insert pendrive on pc.\n\n"
  read -p "Continue? [y/n] " REPLY

  if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
    if [[ $(df -h /dev/sdb &>/dev/null; echo $?) == 0 ]]; then
      REPLY=y
    else
      printf "... no attached pendrive found on the system [dev/sdb]!\nSorry, try it again."
      REPLY=n
    fi
  fi

  if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then
    printf "\nShow information about the file system on pendrive:\n"
    df -h | grep /dev/sdb | sort -n
    printf "\nThe data on the pendrive it will be permanently lost! "
    read -p "Continue? [y/n] " REPLY

    if [[ "${REPLY:-}" =~ ^[Yy]$ ]]; then

      sudo umount /dev/sdb* &>/dev/null

      # Create a msdos partition table on the device:
      sudo parted -s /dev/sdb mklabel msdos 2>/dev/null || _error "creating a Multi Boot USB - line $LINENO"

      # Create the EFI partition and format it with a fat32 filesystem
      sudo parted -s /dev/sdb mkpart primary 1MiB 513MiB || _error "creating a Multi Boot USB - line $LINENO"
      sudo mkfs.fat -F32 /dev/sdb1 # Create the fat32 filesystem

      # Activating the esp and boot flags
      sudo parted -s /dev/sdb set 1 esp on || _error "creating a Multi Boot USB - line $LINENO"
      sudo parted -s /dev/sdb set 1 boot on || _error "creating a Multi Boot USB - line $LINENO"

      # Create is the data partition (/dev/sdb2) for the ISO images and the grub configuration files
      sudo parted -s /dev/sdb mkpart primary 513MiB 6654MiB || _error "creating a Multi Boot USB - line $LINENO"
      sudo mkfs.ext4 /dev/sdb2 # Format the partition with one of the filesystems supported by grub

      #  Create is another data partition (/dev/sdb3) for other data
      sudo parted -s /dev/sdb mkpart primary 6654MiB 100% || _error "creating a Multi Boot USB - line $LINENO"
      sudo mkfs.fat -F32 /dev/sdb3 # Create the fat32 filesystem

      # Create the mountpoints
      sudo mkdir -p /media/{efi,data,pendrive}
      sudo mount /dev/sdb1 /media/efi || _error "creating a Multi Boot USB - line $LINENO"
      sudo mount /dev/sdb2 /media/data || _error "creating a Multi Boot USB - line $LINENO"
      sudo mount /dev/sdb3 /media/pendrive || _error "creating a Multi Boot USB - line $LINENO"
      sudo chown 1000:1000 /media/pendrive

      # Installing legacy grub and grub for efi
      sudo grub-install --target=i386-pc --recheck --boot-directory="/media/data/boot" /dev/sdb || _error "creating a Multi Boot USB - line $LINENO"
      sudo grub-install --target=x86_64-efi --recheck --removable --efi-directory="/media/efi" --boot-directory="/media/data/boot"  || _error "creating a Multi Boot USB - line $LINENO"
      # Create a directory which will host the images of our distributions
      sudo mkdir -p /media/data/boot/iso
      sudo chown 1000:1000 /media/data/boot/iso

      # Download the image in the `/media/data/iso` directory
      if "${_ISO_DOWNLOAD:-false}"; then
        printf "\nDownloading ISO file(s)...\n"
        (wget -qO- http://releases.ubuntu.com/19.04/ubuntu-19.04-desktop-amd64.iso -O /media/data/boot/iso/ubuntu-19.04-desktop-amd64.iso) &
        _spinner $! "... ISO file for Ubuntu 19.04 ..."

        (wget -qO- http://releases.ubuntu.com/18.04/ubuntu-18.04.2-desktop-amd64.iso -O /media/data/boot/iso/ubuntu-18.04.2-desktop-amd64.iso) &
        _spinner $! "... ISO file for Ubuntu 18.04.02 TLS ..."

        (wget -qO- https://ams3.dl.elementary.io/download/MTU1Nzc1NTk4Mg==/elementaryos-5.0-stable.20181016.iso -O /media/data/boot/iso/elementaryos-5.0-stable.20181016.iso) &
        _spinner $! "... ISO file for Elementary OS 5.0 Juno ..."
      fi

      # Add an entry for it in the `grub.cfg` file in the `/media/data/boot/grub` directory
      #
      # Check the Contents of the ISO File: Locate the kernel file and the initrd (or initdr.lz) image.
      # If you’re using a Ubuntu ISO file, you’ll find these files inside the casper folder — the vmlinuz file is the Linux kernel and the initrd file is the initrd image.
      #
      sudo bash -c "cat > /media/data/boot/grub/grub.cfg" <<USBGRUBCFG
# Ubuntu 19.04
menuentry "Ubuntu 19.04 - Try without installing" {
    isofile="/boot/iso/ubuntu-19.04-desktop-amd64.iso"
    loopback loop "\${isofile}"
    linux (loop)/casper/vmlinuz iso-scan/filename="\${isofile}" boot=casper quiet splash ---
    initrd (loop)/casper/initrd
}

# Ubuntu 18.04
menuentry "Ubuntu 18.04.2 - Try without installing" {
    isofile="/boot/iso/ubuntu-18.04.2-desktop-amd64.iso"
    loopback loop "\${isofile}"
    linux (loop)/casper/vmlinuz iso-scan/filename="\${isofile}" boot=casper quiet splash ---
    initrd (loop)/casper/initrd
}

# Elementary OS 5.0 Juno
menuentry "Elementary OS 5.0 Juno - Try without installing" {
    isofile="/boot/iso/elementaryos-5.0-stable.20181016.iso"
    loopback loop "\${isofile}"
    linux (loop)/casper/vmlinuz iso-scan/filename="\${isofile}" boot=casper quiet splash ---
    initrd (loop)/casper/initrd.lz
}
USBGRUBCFG

      # Print info
      printf "\nThe new file system on pendrive:\n"
      df -h /dev/sdb[1-3]
      if ! "${_ISO_DOWNLOAD:-false}"; then
        printf "\n  ⇢  You have to download and copy the ISO image in the '/boot/iso' directory.\n  ⇢  If necessary, you can modify the entry data in the '/boot/grub/grub.cfg' file.\n"
      fi
      sudo umount /media/efi
      sudo umount /media/data
      sudo umount /media/pendrive
    fi
    printf "  ✔  Multi Boot USB is ready\n"
  fi

  if [[ "${REPLY:-}" =~ ^[Nn]$ ]]; then
    printf " Exiting...\n"
  fi
}

# Display error information (\`dmesg\`)
#
_system_error() {
  if [[ $(dmesg --level=err,crit,emerg -H --time-format iso | grep -m1 :; echo $?) == 1 ]]; then
    printf "There isn't error message.\n"
  else
    dmesg --level=err,crit,emerg -H --time-format iso
  fi
}

# Display system information
#
_system_info() {

  _VAR[Kernel]="$(uname -r)"
  _VAR['Model Manufacturer']="$(sudo dmidecode -s system-manufacturer 2>/dev/null)"
  _VAR['Model Name']="$(sudo dmidecode -s system-product-name 2>/dev/null)"
  _VAR['Model Family']="$(sudo dmidecode -s system-family 2>/dev/null)"
  _VAR['Model Serial Number']="$(sudo dmidecode -s system-serial-number 2>/dev/null)"
  _VAR['CPU']="$(sudo dmidecode -s processor-version 2>/dev/null | uniq)"
  _VAR['Memory Total (GB)']="$(free --giga | grep Mem | awk '{print $2}')"
  _VAR[Swappiness]="$(cat /proc/sys/vm/swappiness)"
  _VAR[Swapon]="$(swapon --noheading | awk '{ print $1" ("$3")"  }')"

  printf "\nSystem Info - %s\n" "AppBuilder v${_VERSION}"
  local _BORDER="--------------------------------------------------"
  _BORDER=$_BORDER$_BORDER
  local _HEADER="\n %-25s %-15s\n"
  local _CONTENT=" %-25s %-15s\n"
  printf "$_HEADER" "NAME" "VALUE"
  printf "%50.50s\n" "$_BORDER"
  for _NAME in "${!_VAR[@]}"; do
    [[ -z "${_VAR[$_NAME]}" ]] && _VAR[$_NAME]="n/a"
    printf "$_CONTENT" "$_NAME" "${_VAR[$_NAME]}"
  done | sort -n
  printf "%50.50s\n\n" "$_BORDER"
  # printf "Hard disk:\n\n%s\n" "$(sudo parted -l)"
}

# Global Variables
#
declare -A _VAR
_VAR[Environment]="$(hostnamectl | grep Chassis | awk '{print $2}')"
_VAR[Hostname]="$HOSTNAME"
_VAR[IP]="$(hostname -I | awk '{print $1}')"
if "${_FORCE:-false}"; then
  _VAR[IP]="$(hostname -i)"
fi
[ -d /home/vagrant ] && _VAR[IP]="$(hostname -I | awk '{print $2}')"
_VAR[Firewall]="$(LANG=C sudo ufw status 2>/dev/null | grep Status: | cut -d ' ' -f 2)"
_VAR[CPUs]="$(grep -c ^processor /proc/cpuinfo)" # number of CPUs/cores
_VAR[Timezone]="$(timedatectl | grep -e 'Time zone' | tr -s " " | cut -d ' ' -f 4)"
_VAR[Distribution]=$(cat /etc/*-release 2>/dev/null | grep DISTRIB_ID | cut -d= -f2)
_VAR['Distro Codename']=$(cat /etc/*-release 2>/dev/null | grep DISTRIB_CODENAME | cut -d= -f2)
_VAR['Distro Ubuntu Codename']=$(cat /etc/*-release 2>/dev/null | grep UBUNTU_CODENAME | cut -d= -f2)

# Call the `_main` function after everything has been defined
#
_main "$@"
